<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wenbo's Blog]]></title>
  <link href="http://wenboqiu.github.io/atom.xml" rel="self"/>
  <link href="http://wenboqiu.github.io/"/>
  <updated>2015-06-06T08:50:27+08:00</updated>
  <id>http://wenboqiu.github.io/</id>
  <author>
    <name><![CDATA[Wenbo Qiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A*寻路]]></title>
    <link href="http://wenboqiu.github.io/blog/2015/06/06/astar-path-finding/"/>
    <updated>2015-06-06T07:05:11+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2015/06/06/astar-path-finding</id>
    <content type="html"><![CDATA[<p>这几天在公司做一个2D RPG游戏的demo，涉及到寻路的问题，于是自己写了A*寻路算法，分享一下。</p>

<p>地图初始化时，只需要告诉PathFind这个类地图的宽度跟高度，并且初始化障碍点即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">PathFind</span><span class="o">::</span><span class="n">InitMap</span><span class="p">(</span><span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">width</span><span class="p">,</span> <span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">width</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">height</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isWalkable</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">PathFind</span><span class="o">::</span><span class="n">UpdateMapPoint</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时，只需要调用FindPath方法，设置能够行走的方向（八方向or四方向），是否无视边角。该方法返回寻路是否成功。如果成功，路径数据会被存入栈中m_pathList，调用NextPathPoint方法，即可获得下一个目标点。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">m_pathFind</span><span class="p">.</span><span class="n">FindPath</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">m_directionMode</span><span class="o">==</span><span class="n">kDirectionMode8</span><span class="o">?</span><span class="kc">true</span><span class="o">:</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'><span class="n">m_pathFind</span><span class="p">.</span><span class="n">NextPathPoint</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>源码在最下面&mdash;&ndash;>></p>

<p>参考文章：
1. 理解A<em>寻路算法具体过程 (<a href="http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html">http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html</a>)
2. A</em> Pathfinding for Beginners (<a href="http://www.policyalmanac.org/games/aStarTutorial.htm">http://www.policyalmanac.org/games/aStarTutorial.htm</a>)</p>

<p>另外提一下，网上热传的一个45度ARPG demo &lt;&lt;热血沙城>>，我下载了它的Cocos2d-x2.2.5 C++修改版，虽然作者说该demo使用了A*寻路，但是实际运行起来，效率很低，一个稍微需要绕道的路径，电脑能够卡好几秒，且人物走的并不是最短路径，更像是广度优先搜索的结果。
(<a href="http://blog.csdn.net/zym_123456/article/details/42641591">http://blog.csdn.net/zym_123456/article/details/42641591</a>)</p>

<!--more-->


<p>PathFind.h&mdash;&ndash;>></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef __PATHFIND_H__</span>
</span><span class='line'><span class="cp">#define __PATHFIND_H__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt; </span><span class="c1">// for std::find</span>
</span><span class='line'><span class="cp">#include &quot;cocos2d.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PathPoint</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PathPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkable</span><span class="p">);</span>
</span><span class='line'>  <span class="o">~</span><span class="n">PathPoint</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">ClearPathInfo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">int</span> <span class="n">GetX</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_x</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">int</span> <span class="n">GetY</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">m_y</span><span class="p">;}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">float</span> <span class="n">GetPathFValue</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_FValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">SetPathGValue</span><span class="p">(</span><span class="kt">float</span> <span class="n">gValue</span><span class="p">){</span><span class="n">m_GValue</span> <span class="o">=</span> <span class="n">gValue</span><span class="p">;</span> <span class="n">m_FValue</span><span class="o">=</span><span class="n">m_GValue</span><span class="o">+</span><span class="n">m_HValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">float</span> <span class="n">GetPathGValue</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_GValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">SetPathHValue</span><span class="p">(</span><span class="kt">float</span> <span class="n">hValue</span><span class="p">){</span><span class="n">m_HValue</span> <span class="o">=</span> <span class="n">hValue</span><span class="p">;</span> <span class="n">m_FValue</span><span class="o">=</span><span class="n">m_GValue</span><span class="o">+</span><span class="n">m_HValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">float</span> <span class="n">GetPathHValue</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_HValue</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">SetWalkable</span><span class="p">(</span><span class="kt">bool</span> <span class="n">isWalkable</span><span class="p">){</span><span class="n">m_bWalkable</span> <span class="o">=</span> <span class="n">isWalkable</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">GetWalkable</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_bWalkable</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PathPoint</span><span class="o">*</span> <span class="n">m_parentPoint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_x</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_y</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">m_bWalkable</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">m_FValue</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">m_GValue</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">m_HValue</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PathFind</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PathFind</span><span class="p">()</span><span class="o">:</span><span class="n">m_pathEnd</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)){}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">PathFind</span><span class="p">(){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">InitMap</span><span class="p">(</span><span class="kt">int</span> <span class="n">mapWidth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mapHeight</span><span class="p">);</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">bool</span> <span class="n">UpdateMapPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkAble</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">FindPath</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">start</span><span class="p">,</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PrintPath</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">NextPathPoint</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">GetPathEnd</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_pathEnd</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">FindPath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">GeneratePath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">SurroundPoints</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PathPoint</span><span class="o">*</span> <span class="n">MinPoint</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">IsWalkable</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;&amp;</span> <span class="n">surroundPoints</span><span class="p">,</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">FoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">NotFoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">CalculateGValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">CalculateHValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">m_openList</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">m_closeList</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">m_pathList</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">m_pathEnd</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __PATHFIND_H__</span>
</span></code></pre></td></tr></table></div></figure>


<p>PathFind.cpp &mdash;&ndash;>></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;PathFind.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">USING_NS_CC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">PathPoint</span><span class="o">::</span><span class="n">PathPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkable</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span><span class="n">m_x</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_y</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_bWalkable</span><span class="p">(</span><span class="n">isWalkable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_FValue</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_GValue</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_HValue</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_parentPoint</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">PathPoint</span><span class="o">::~</span><span class="n">PathPoint</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathPoint</span><span class="o">::</span><span class="n">ClearPathInfo</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_FValue</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_GValue</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_HValue</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_parentPoint</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">&gt;&gt;</span> <span class="n">m_mapList</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">m_mapWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">m_mapHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="n">m_bMapHasInit</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">InitMap</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_mapList</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>  <span class="n">m_mapList</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">width</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">&gt;</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'>      <span class="n">m_mapList</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">height</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">PathPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="n">PathPoint</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>          <span class="n">column</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_mapList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">column</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m_mapWidth</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_mapHeight</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_bMapHasInit</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">UpdateMapPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkAble</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_bMapHasInit</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">m_mapWidth</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="n">m_mapHeight</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m_mapList</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">].</span><span class="n">SetWalkable</span><span class="p">(</span><span class="n">isWalkAble</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">FindPath</span><span class="p">(</span><span class="n">Point</span> <span class="n">start</span><span class="p">,</span> <span class="n">Point</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_bMapHasInit</span>
</span><span class='line'>      <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">x</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">m_mapWidth</span> <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">y</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">m_mapHeight</span>
</span><span class='line'>      <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">x</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">m_mapWidth</span> <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">y</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">m_mapHeight</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">FindPath</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">start</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">start</span><span class="p">.</span><span class="n">y</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">end</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">end</span><span class="p">.</span><span class="n">y</span><span class="p">],</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="n">isIgnoreCorner</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">FindPath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_closeList</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>  <span class="n">m_openList</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">start</span><span class="o">-&gt;</span><span class="n">ClearPathInfo</span><span class="p">();</span>
</span><span class='line'>  <span class="n">m_openList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">m_openList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">PathPoint</span><span class="o">*</span> <span class="n">tempStart</span> <span class="o">=</span> <span class="n">MinPoint</span><span class="p">();</span>
</span><span class='line'>      <span class="n">m_closeList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tempStart</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">surroundPoints</span> <span class="o">=</span> <span class="n">SurroundPoints</span><span class="p">(</span><span class="n">tempStart</span><span class="p">,</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="n">isIgnoreCorner</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">surroundPoints</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(;</span> <span class="n">iter</span><span class="o">!=</span><span class="n">surroundPoints</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">m_openList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="o">*</span><span class="n">iter</span><span class="p">)</span> <span class="o">!=</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">FoundPoint</span><span class="p">(</span><span class="n">tempStart</span><span class="p">,</span> <span class="o">*</span><span class="n">iter</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span><span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">NotFoundPoint</span><span class="p">(</span><span class="n">tempStart</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="o">*</span><span class="n">iter</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">surroundPoints</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">surroundPoints</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">end</span><span class="p">)</span> <span class="o">!=</span> <span class="n">surroundPoints</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">GeneratePath</span><span class="p">(</span><span class="n">end</span><span class="p">);</span>
</span><span class='line'>          <span class="n">m_pathEnd</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">end</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">());</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">GeneratePath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">m_pathList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">m_pathList</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PathPoint</span><span class="o">*</span> <span class="n">point</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">point</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">m_pathList</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">point</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">point</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()));</span>
</span><span class='line'>      <span class="n">point</span> <span class="o">=</span> <span class="n">point</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">SurroundPoints</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">surroundPoints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">relatives</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">Vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">Vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)};</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">coords</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">center</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()),</span> <span class="n">relatives</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">surroundPoints</span><span class="p">,</span> <span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">is8Direction</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Vec2</span> <span class="n">obliquedRelatives</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)};</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">bool</span> <span class="n">flag</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>      <span class="n">Vec2</span> <span class="n">obliquedCoords</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">obliquedCoords</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">center</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()),</span> <span class="n">obliquedRelatives</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">surroundPoints</span><span class="p">,</span> <span class="n">obliquedCoords</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">surroundPoints</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">PathPoint</span><span class="o">*</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">MinPoint</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_openList</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">PathPoint</span><span class="o">*</span> <span class="n">minPoint</span> <span class="o">=</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m_openList</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">m_openList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetPathFValue</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">minPoint</span><span class="o">-&gt;</span><span class="n">GetPathFValue</span><span class="p">())</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">minPoint</span> <span class="o">=</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>              <span class="n">minIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">next</span><span class="p">(</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">minIndex</span> <span class="p">);</span>
</span><span class='line'>      <span class="n">m_openList</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">minPoint</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">m_mapWidth</span> <span class="o">||</span> <span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="n">m_mapHeight</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span><span class="p">].</span><span class="n">GetWalkable</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;&amp;</span> <span class="n">surroundPoints</span><span class="p">,</span> <span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">tileCoord</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">m_closeList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">m_closeList</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span><span class="p">])</span> <span class="o">!=</span> <span class="n">m_closeList</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">surroundPoints</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">FoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">oldGValue</span> <span class="o">=</span> <span class="n">surround</span><span class="o">-&gt;</span><span class="n">GetPathGValue</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">newGValue</span> <span class="o">=</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetPathGValue</span><span class="p">()</span> <span class="o">+</span> <span class="n">CalculateGValue</span><span class="p">(</span><span class="n">center</span><span class="p">,</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">oldGValue</span> <span class="o">&gt;</span> <span class="n">newGValue</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">surround</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>      <span class="n">surround</span><span class="o">-&gt;</span><span class="n">SetPathGValue</span><span class="p">(</span><span class="n">newGValue</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">NotFoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">newGValue</span> <span class="o">=</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetPathGValue</span><span class="p">()</span> <span class="o">+</span> <span class="n">CalculateGValue</span><span class="p">(</span><span class="n">center</span><span class="p">,</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>  <span class="n">surround</span><span class="o">-&gt;</span><span class="n">SetPathGValue</span><span class="p">(</span><span class="n">newGValue</span><span class="p">);</span>
</span><span class='line'>  <span class="n">surround</span><span class="o">-&gt;</span><span class="n">SetPathHValue</span><span class="p">(</span><span class="n">CalculateHValue</span><span class="p">(</span><span class="n">surround</span><span class="p">,</span> <span class="n">end</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">surround</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_openList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">surround</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">CalculateGValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_offsetX</span> <span class="o">=</span> <span class="n">start</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_offsetY</span> <span class="o">=</span> <span class="n">start</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span> <span class="n">_offsetX</span> <span class="o">*</span> <span class="n">_offsetX</span> <span class="o">+</span> <span class="n">_offsetY</span> <span class="o">*</span> <span class="n">_offsetY</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">CalculateHValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_x</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">());</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_y</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">_x</span> <span class="o">+</span> <span class="n">_y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">PrintPath</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_pathList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;Path Start------------------------------------------------------------&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//int step = 1;</span>
</span><span class='line'>      <span class="c1">//for (std::vector&lt;Point&gt;::iterator iter=m_pathList.begin(); iter!=m_pathList.end(); ++iter)</span>
</span><span class='line'>      <span class="c1">//{</span>
</span><span class='line'>      <span class="c1">// CCLOG(&quot;Step %d:(%d,%d)&quot;, step, (*iter).x, (*iter).y);</span>
</span><span class='line'>      <span class="c1">// ++step;</span>
</span><span class='line'>      <span class="c1">//}</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;Path End--------------------------------------------------------------&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Point</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">NextPathPoint</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_pathList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Point</span> <span class="n">dest</span> <span class="o">=</span> <span class="n">m_pathList</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>      <span class="n">m_pathList</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">dest</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[名人语录]]></title>
    <link href="http://wenboqiu.github.io/blog/2015/01/09/follow-your-heart/"/>
    <updated>2015-01-09T18:56:01+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2015/01/09/follow-your-heart</id>
    <content type="html"><![CDATA[<p>这些年，互联网上流传过好多语录，如老罗语录，韩乔生语录等等。目前最火的应该是马云语录啦，这位中国首富的号召力果然不一般，发表的各种意见往往都能被大众奉为圭臬，在网上被人大书特书，而马云又不刻意低调，经常在各种场合发表高见，于是乎马云语录就火爆出炉啦。</p>

<p>对于那些因为崇拜马云，而对他的言论趋之若鹜的同学，我想说：</p>

<p>马云的很多言论，可以看出他对生活，对工作的态度，是非常值得常人学习的。</p>

<p>但是千万不要以为真得做到他所说的那样，就一定能够成功，一定能够避免失败，它们仅仅是要达到成功所需要的必要条件而已。</p>

<p>自己的路还是要自己走，照着别人的法子走路，不见得一定能走好。</p>

<p>莫盲从，坚持自己觉得正确的方向，继续努力吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈一下游戏内更新]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/12/31/talk-about-in-game-updating/"/>
    <updated>2014-12-31T15:09:32+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/12/31/talk-about-in-game-updating</id>
    <content type="html"><![CDATA[<p><img src="http://wenboqiu.github.io/images/img_updating.jpg" width="320" height="768" title="MonsterBall" ></p>

<p>大家如果经常玩手游的话，我相信对上面这个画面一定不陌生。上面这个是腾讯代理的怪物弹珠的更新界面，还有些游戏更新界面设计的更加花哨，更加卖萌，目的只有一个，亲，快更新到最新版本吧，否则不能玩哦。</p>

<p>本来更新无可厚非，任何一个软件（游戏），总是存在bug的，总是有需求不完善的地方，通过后续更新，修正bug，更新功能，可以持续的给玩家以新内容，保持游戏的活力，最大的限度的留住玩家。但是任何一种手段使用过度的话，总是有副作用的，游戏更新也不例外。</p>

<!--more-->


<p>在说这个副作用之前，先简要介绍一下ios游戏更新的历史吧。早期，appstore上的应用程序和游戏都是通过appstore的更新机制提供更新给玩家，当开发商开发了一个新版本的程序或游戏，需要提交appstore进行审核，正常的审核周期是一周，如果碰到审核不通过之类的情况，于是又返工修正，有可能月余也无法在appstore里面上线。对每一个开发团队来说，任何一次app提交流程都是一个慎之又慎的经历，生怕一个细节的疏忽，导致delay。后来，cocos2dx添加了对脚本的支持，以前一般通过c++语言编写游戏逻辑，然后开发者编译打包，提交审核，现在呢，只需要在游戏内下载更新脚本文件，游戏都不需要重启，就可以加载新的脚本文件，运行新的逻辑。于是广大开发团队欢呼雀跃，终于不用老看苹果的眼色行事啦。</p>

<p>好处显而易见，但是副作用呢？有一件事情我印象很深刻，当时还在上一家公司，当我们告诉制作人，我们的游戏可以热更新，他很高兴，说终于可以不担心发布版本有bug啦，反正之后就能发布版本来修正。我觉得他对更新的理解是有失偏颇的，能够随时更新逻辑，不通过苹果审核，不代表我们可以随意发布一个未经测试的版本面向玩家，让玩家代替测试工程师来测试游戏。我们不善待玩家，玩家就会毫不犹豫的抛弃我们。事态的发展正如刚开始所担心的，我们经常是今天发布完一个版本，第二天就不得不发布一个紧急更新来修正一个或者多个严重的bug，有时候还是当天更新。有些bug，其实只要测试一遍场景，就能够发现的。上一个项目的结局是不幸的，团队解散，游戏停服。不考虑运营，游戏设计方面的因素，对于更新这个手段的利用，我们是不合格的，我们确实发挥了热更新的优势，但却是用来弥补测试的不充分。</p>

<p>设想一个普通玩家，从茫茫游戏大海中，花费了十几分钟，从appstore上下载了一个100M的游戏。一打开游戏，还是要继续下载，好不容易下载完，玩了一段时间，打算第二天有空再玩。等到第二天再次打开，映入眼帘的还是更新，还要更新10M大小，我相信任何一位普通的玩家都会嘀咕，怎么还要下载呀，对我有什么影响啊？耐着性子，等下载完，打开游戏，觉得也没什么变化呀（比如说以前我们游戏，很多更新是那些高级玩家才会接触到的，因为他们的进度更快），既然选择更新，玩家总会有期待，游戏总会有能感受得到的变化吧，否则白白更新干嘛呢。偶尔还好，如果一个游戏老是让玩家感受期待落空的滋味，如果是我，一定会毫不犹豫地把它删掉。我是来玩游戏的，不是白花钱还让开发团队耍的。</p>

<p>作为一个在日本市场上长居畅销榜榜首的游戏，我原以为怪物弹珠的版本更新是不会太频繁的，起码游戏基本玩法的代码是健壮的，最多可能会针对中国市场调整些怪物的参数，设计些新的活动。令我没想到的时，腾讯更新起游戏来也是很起劲呀，基本上一天一次的节奏，基本上每次都不小，更新包经常是10M上下的。作为普通玩家，每次更新完，也没觉得哪里有更新。截这张图时，我刚好准备回家，在火车上，本打算玩一会弹珠的，消磨下时间。结果一打开还是更新，一怒就把游戏给删掉了。清净。为何会频繁更新？我猜想可能是腾讯的策划们刚更新完配置，没有经过深入的测试，就上线了。结果呢，那些高玩们一下子就发现了设计的漏洞等等，于是项目组就忙不迭的修正。</p>

<p>最后就一句话，莫让更新用来亡羊补牢，来掩盖项目组的不作为。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Cocos2d-x 2.x版本CCLabelTTF支持外描边(非多个方向重绘来实现描边)]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/12/01/support-label-outline-in-cocos2dx-2-dot-x/"/>
    <updated>2014-12-01T17:12:58+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/12/01/support-label-outline-in-cocos2dx-2-dot-x</id>
    <content type="html"><![CDATA[<p>想看实现方式请直接跳到Part 2。</p>

<p>Part 1:
我上一个游戏项目使用的是Cocos2d-x 2.1.2，那时候CCLabelTTF还没有支持描边的API，后来的版本加上了enableStroke这个接口，可是实现起来的效果是内描边，内描边的效果并不是很理想，如果字体本身很细的话，内描边后，基本全是描边，没剩多少肉了。</p>

<p>当时搜寻网上，找到一个可行的外描边方案。这个方案是修改CCLabelTTF::updateTexture()这个方法，原理是将原来字体的纹理，往字的360度方向位移描边的宽度距离，然后绘制生成新的纹理，如果每40度绘制一次的话，360度就需要绘制9次，最后再将字体本身绘制一次，本来一个label 的drawcall消耗是1次，这种方案drawcall消耗就是10次。</p>

<p>这个方案能够勉强实现外描边的效果，在苹果设备上的效果还是可以的，但是一拿到android设备上检查，就会发现描边并不是连贯的，有点坑坑洼洼的感觉。更让人无法接受的是，该方案会导致label的draw call剧烈增加，一些label比较多的页面，如果都需要描边效果的话，会导致游戏每一帧的绘制时间变长，造成游戏明显的卡顿。这个问题在android的低端设备上尤其明显。于是项目后期，我们放弃了字体描边的效果。</p>

<p>下面为该方案的源码：</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//CCLabelTTF::updateTexture()</span>
</span><span class='line'><span class="n">CCTexture2D</span> <span class="o">*</span><span class="n">tex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// let system compute label&#39;s width or height when its value is 0</span>
</span><span class='line'><span class="c1">// refer to cocos2d-x issue #1430</span>
</span><span class='line'><span class="n">tex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CCTexture2D</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tex</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">tex</span><span class="o">-&gt;</span><span class="n">initWithString</span><span class="p">(</span> <span class="n">m_string</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">m_pFontName</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">m_fFontSize</span> <span class="o">*</span> <span class="n">CC_CONTENT_SCALE_FACTOR</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">CC_SIZE_POINTS_TO_PIXELS</span><span class="p">(</span><span class="n">m_tDimensions</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">m_hAlignment</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">m_vAlignment</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">tex</span><span class="o">-&gt;</span><span class="n">autorelease</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">m_strokeEnabled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//原始字符串</span>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">spriteText</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">createWithTexture</span><span class="p">(</span><span class="n">tex</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ccBlendFunc</span> <span class="n">originalBlend</span> <span class="o">=</span> <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">getBlendFunc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//计算考虑描边后texture的尺寸</span>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">realTextureSize</span> <span class="o">=</span> <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">();</span>
</span><span class='line'>    <span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//call to clear error</span>
</span><span class='line'>    <span class="n">glGetError</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建用于实现描边的可渲染texture</span>
</span><span class='line'>    <span class="n">CCRenderTexture</span> <span class="o">*</span><span class="n">rt</span> <span class="o">=</span> <span class="n">CCRenderTexture</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制底纹</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="n">m_strokeColor</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ccBlendFunc</span> <span class="n">func</span> <span class="o">=</span> <span class="p">{</span> <span class="n">GL_SRC_ALPHA</span><span class="p">,</span> <span class="n">GL_ONE</span><span class="p">};</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setBlendFunc</span><span class="p">(</span><span class="n">func</span><span class="p">);</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">CCPoint</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">,</span> <span class="mf">0.5f</span><span class="p">));</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setFlipY</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">precision</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span> <span class="c1">//此值越小，描边越细腻，同时CPU开销越高</span>
</span><span class='line'>    <span class="n">rt</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">360</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">precision</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">CC_DEGREES_TO_RADIANS</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">CCPoint</span><span class="p">(</span>
</span><span class='line'>                                        <span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5f</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5f</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">));</span>
</span><span class='line'>        <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制原始字符串</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">getColor</span><span class="p">());</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setBlendFunc</span><span class="p">(</span><span class="n">originalBlend</span><span class="p">);</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">CCPoint</span><span class="p">(</span><span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">,</span> <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">));</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">();</span>
</span><span class='line'>    <span class="n">rt</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tex</span> <span class="o">=</span> <span class="n">rt</span><span class="o">-&gt;</span><span class="n">getSprite</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getTexture</span><span class="p">();</span>
</span><span class='line'>    <span class="n">tex</span><span class="o">-&gt;</span><span class="n">setAliasTexParameters</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Part 2：
目前这个项目因为开始的比较早，依然使用的是Cocos2d-x 2.x版本，虽然知道Cocos2d-x 3.x版本已经支持外描边，但是因为3.x相对于2.x改动很大，不太适合直接将项目引擎直接从2.x升级到3.x版本。既然没办法直接用上3.x的特性，那只好看看能不能借鉴借鉴3.x CCLabel的实现。</p>

<p>3.x中CCLabel的实现使用了新的方式，不像2.x中先通过生成纹理，再显示，这个纹理的生成依赖于平台各自的API，不同的平台各有实现方式，不过在3.x中，CCLabel的显示是直接由特定的着色器提供支持，要想让2.x的CCLabelTTF改用类似的方案也是可行的，只不过要费时费力一些。</p>

<p>幸运的是，3.x为了兼容以前CCLabelTTF的API，也提供了原来的实现，即生成纹理，然后draw，顺带将内描边改成了外描边，只不过触控目前好像已经不对2.x版本提供支持，并没有将对内描边的修正应用到2.x版本上。</p>

<p>3.x 外描边的修正可以参考下面这个链接：
<a href="https://github.com/Dhilan007/cocos2d-x/commit/6f9d379beb6f47f43a3305b885000d44e978ccd7">https://github.com/Dhilan007/cocos2d-x/commit/6f9d379beb6f47f43a3305b885000d44e978ccd7</a></p>

<p>可以看到，这个修正主要改动了两个文件，一个是Cocos2dxBitmap.java中的createTextBitmapShadowStroke，另一个是CCDevice.mm的_initWithString。</p>

<p>第一个文件是Android平台上生成纹理的代码，在2.2.3里面，文件名和方法名也是一样的。下面是基于2.2.3修改的代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">createTextBitmapShadowStroke</span><span class="o">(</span><span class="n">String</span> <span class="n">pString</span><span class="o">,</span>  <span class="kd">final</span> <span class="n">String</span> <span class="n">pFontName</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">pFontSize</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">float</span> <span class="n">fontTintR</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">fontTintG</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">fontTintB</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">int</span> <span class="n">pAlignment</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">pWidth</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">pHeight</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">shadow</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">float</span> <span class="n">shadowDX</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">shadowDY</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">shadowBlur</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">stroke</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeR</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeG</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeB</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">horizontalAlignment</span> <span class="o">=</span> <span class="n">pAlignment</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">verticalAlignment</span>   <span class="o">=</span> <span class="o">(</span><span class="n">pAlignment</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pString</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">refactorString</span><span class="o">(</span><span class="n">pString</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">Paint</span> <span class="n">paint</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">newPaint</span><span class="o">(</span><span class="n">pFontName</span><span class="o">,</span> <span class="n">pFontSize</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * if the first word width less than designed width,It means no words to show</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">pWidth</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="kt">int</span> <span class="n">firstWordWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">paint</span><span class="o">.</span><span class="na">measureText</span><span class="o">(</span><span class="n">pString</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span> <span class="n">firstWordWidth</span> <span class="o">&gt;</span> <span class="n">pWidth</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;createTextBitmapShadowStroke warning:&quot;</span><span class="o">,</span><span class="s">&quot;the input width is less than the width of the pString&#39;s first word\n&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set the paint color</span>
</span><span class='line'>  <span class="n">paint</span><span class="o">.</span><span class="na">setARGB</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="mf">255.0</span> <span class="o">*</span> <span class="n">fontTintR</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="mf">255.0</span> <span class="o">*</span> <span class="n">fontTintG</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="mf">255.0</span> <span class="o">*</span> <span class="n">fontTintB</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="n">TextProperty</span> <span class="n">textProperty</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeTextProperty</span><span class="o">(</span><span class="n">pString</span><span class="o">,</span> <span class="n">pWidth</span><span class="o">,</span> <span class="n">pHeight</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">bitmapTotalHeight</span> <span class="o">=</span> <span class="o">(</span><span class="n">pHeight</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mTotalHeight</span><span class="o">:</span> <span class="n">pHeight</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// padding needed when using shadows (not used otherwise)</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">bitmapPaddingX</span>   <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">bitmapPaddingY</span>   <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">renderTextDeltaX</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">renderTextDeltaY</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span> <span class="o">||</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">bitmapTotalHeight</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;createTextBitmapShadowStroke warning:&quot;</span><span class="o">,</span><span class="s">&quot;textProperty MaxWidth is 0 or bitMapTotalHeight is 0\n&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">bitmapPaddingX</span><span class="o">,</span>
</span><span class='line'>          <span class="n">bitmapTotalHeight</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">bitmapPaddingY</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">Config</span><span class="o">.</span><span class="na">ARGB_8888</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">final</span> <span class="n">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Canvas</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Draw string. */</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">FontMetricsInt</span> <span class="n">fontMetricsInt</span> <span class="o">=</span> <span class="n">paint</span><span class="o">.</span><span class="na">getFontMetricsInt</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// draw again with stroke on if needed </span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span> <span class="n">stroke</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">final</span> <span class="n">Paint</span> <span class="n">paintStroke</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">newPaint</span><span class="o">(</span><span class="n">pFontName</span><span class="o">,</span> <span class="n">pFontSize</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>      <span class="n">paintStroke</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>      <span class="n">paintStroke</span><span class="o">.</span><span class="na">setStrokeWidth</span><span class="o">(</span><span class="n">strokeSize</span><span class="o">);</span>
</span><span class='line'>      <span class="n">paintStroke</span><span class="o">.</span><span class="na">setARGB</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">strokeR</span> <span class="o">*</span> <span class="mi">255</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">strokeG</span> <span class="o">*</span> <span class="mi">255</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">strokeB</span> <span class="o">*</span> <span class="mi">255</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeY</span><span class="o">(</span><span class="n">fontMetricsInt</span><span class="o">,</span> <span class="n">pHeight</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mTotalHeight</span><span class="o">,</span> <span class="n">verticalAlignment</span><span class="o">);</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">lines2</span> <span class="o">=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mLines</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">x</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeX</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>          <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">renderTextDeltaX</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">renderTextDeltaY</span><span class="o">,</span> <span class="n">paintStroke</span><span class="o">);</span>
</span><span class='line'>          <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">renderTextDeltaX</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">renderTextDeltaY</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>          <span class="n">y</span> <span class="o">+=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mHeightPerLine</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeY</span><span class="o">(</span><span class="n">fontMetricsInt</span><span class="o">,</span> <span class="n">pHeight</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mTotalHeight</span><span class="o">,</span> <span class="n">verticalAlignment</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mLines</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">x</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeX</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>          <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">renderTextDeltaX</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">renderTextDeltaY</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>          <span class="n">y</span> <span class="o">+=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mHeightPerLine</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">initNativeObject</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二个文件是iOS平台生成纹理的代码。在2.2.3中相应的代码在CCImage.mm中，方法名还是一样的。下面是基于2.2.3修改的代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">static</span> <span class="n">bool</span> <span class="n">s_isIOS7OrHigher</span> <span class="o">=</span> <span class="n">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">lazyCheckIOS7</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">bool</span> <span class="n">isInited</span> <span class="o">=</span> <span class="n">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isInited</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">s_isIOS7OrHigher</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">systemVersion</span><span class="p">]</span> <span class="nl">compare:</span><span class="s">@&quot;7.0&quot;</span> <span class="nl">options:</span><span class="n">NSNumericSearch</span><span class="p">]</span> <span class="o">!=</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
</span><span class='line'>        <span class="n">isInited</span> <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// refer CCImage::ETextAlign</span>
</span><span class='line'><span class="cp">#define ALIGN_TOP    1</span>
</span><span class='line'><span class="cp">#define ALIGN_CENTER 3</span>
</span><span class='line'><span class="cp">#define ALIGN_BOTTOM 2</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">bool</span> <span class="nf">_initWithString</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">pText</span><span class="p">,</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">CCImage</span><span class="o">::</span><span class="n">ETextAlign</span> <span class="n">eAlign</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">pFontName</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nSize</span><span class="p">,</span> <span class="n">tImageInfo</span><span class="o">*</span> <span class="n">pInfo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// lazy check whether it is iOS7 device</span>
</span><span class='line'>    <span class="n">lazyCheckIOS7</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bool</span> <span class="n">bRet</span> <span class="o">=</span> <span class="n">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span> <span class="n">pText</span> <span class="o">||</span> <span class="o">!</span> <span class="n">pInfo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">str</span>          <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="n">pText</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">fntName</span>      <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="n">pFontName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGSize</span> <span class="n">dim</span><span class="p">,</span> <span class="n">constrainSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span>     <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span>    <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// On iOS custom fonts must be listed beforehand in the App info.plist (in order to be usable) and referenced only the by the font family name itself when</span>
</span><span class='line'>        <span class="c1">// calling [UIFont fontWithName]. Therefore even if the developer adds &#39;SomeFont.ttf&#39; or &#39;fonts/SomeFont.ttf&#39; to the App .plist, the font must</span>
</span><span class='line'>        <span class="c1">// be referenced as &#39;SomeFont&#39; when calling [UIFont fontWithName]. Hence we strip out the folder path components and the extension here in order to get just</span>
</span><span class='line'>        <span class="c1">// the font family name itself. This stripping step is required especially for references to user fonts stored in CCB files; CCB files appear to store</span>
</span><span class='line'>        <span class="c1">// the &#39;.ttf&#39; extensions when referring to custom fonts.</span>
</span><span class='line'>        <span class="n">fntName</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fntName</span> <span class="n">lastPathComponent</span><span class="p">]</span> <span class="n">stringByDeletingPathExtension</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// create the font   </span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="n">fntName</span> <span class="nl">size:</span><span class="n">nSize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">font</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">dim</span> <span class="o">=</span> <span class="n">_calculateStringSize</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">font</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">constrainSize</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">font</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="n">nSize</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">font</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">dim</span> <span class="o">=</span> <span class="n">_calculateStringSize</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">font</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">constrainSize</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span> <span class="n">font</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// compute start point</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">startH</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// vertical alignment</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">vAlignment</span> <span class="o">=</span> <span class="p">(</span><span class="n">eAlign</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">vAlignment</span> <span class="o">==</span> <span class="n">ALIGN_TOP</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">startH</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">vAlignment</span> <span class="o">==</span> <span class="n">ALIGN_CENTER</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">startH</span> <span class="o">=</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">startH</span> <span class="o">=</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// adjust text rect</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">dim</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// compute the padding needed by shadow and stroke</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">shadowStrokePaddingX</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">shadowStrokePaddingY</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasStroke</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingX</span> <span class="o">=</span> <span class="p">(</span><span class="n">ceilf</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span><span class="p">))</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingY</span> <span class="o">=</span> <span class="p">(</span><span class="n">ceilf</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span><span class="p">))</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasShadow</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingX</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">shadowStrokePaddingX</span><span class="p">,</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">abs</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">width</span><span class="p">));</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingY</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">shadowStrokePaddingY</span><span class="p">,</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">abs</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// add the padding (this could be 0 if no shadow and no stroke)</span>
</span><span class='line'>        <span class="n">dim</span><span class="p">.</span><span class="n">width</span>  <span class="o">+=</span> <span class="n">shadowStrokePaddingX</span><span class="p">;</span>
</span><span class='line'>        <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="n">shadowStrokePaddingY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[(</span><span class="kt">int</span><span class="p">)(</span><span class="n">dim</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">dim</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// draw text</span>
</span><span class='line'>        <span class="n">CGColorSpaceRef</span> <span class="n">colorSpace</span>  <span class="o">=</span> <span class="n">CGColorSpaceCreateDeviceRGB</span><span class="p">();</span>
</span><span class='line'>        <span class="n">CGContextRef</span> <span class="n">context</span>        <span class="o">=</span> <span class="n">CGBitmapContextCreate</span><span class="p">(</span><span class="n">data</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">colorSpace</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">kCGImageAlphaPremultipliedLast</span> <span class="o">|</span> <span class="n">kCGBitmapByteOrder32Big</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGColorSpaceRelease</span><span class="p">(</span><span class="n">colorSpace</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">delete</span><span class="p">[]</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// text color</span>
</span><span class='line'>        <span class="n">CGContextSetRGBFillColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorR</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorG</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorB</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// move Y rendering to the top of the image</span>
</span><span class='line'>        <span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="p">(</span><span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">));</span>
</span><span class='line'>        <span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0f</span><span class="p">);</span> <span class="c1">//NOTE: NSString draws in UIKit referential i.e. renders upside-down compared to CGBitmapContext referential</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// store the current context</span>
</span><span class='line'>        <span class="c1">//UIGraphicsPushContext(context);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// measure text size with specified font and determine the rectangle to draw text in</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="n">uHoriFlag</span> <span class="o">=</span> <span class="n">eAlign</span> <span class="o">&amp;</span> <span class="mh">0x0f</span><span class="p">;</span>
</span><span class='line'>        <span class="n">UITextAlignment</span> <span class="n">align</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITextAlignment</span><span class="p">)((</span><span class="mi">2</span> <span class="o">==</span> <span class="n">uHoriFlag</span><span class="p">)</span> <span class="o">?</span> <span class="n">UITextAlignmentRight</span>
</span><span class='line'>                                <span class="o">:</span> <span class="p">(</span><span class="mi">3</span> <span class="o">==</span> <span class="n">uHoriFlag</span><span class="p">)</span> <span class="o">?</span> <span class="n">UITextAlignmentCenter</span>
</span><span class='line'>                                <span class="o">:</span> <span class="n">UITextAlignmentLeft</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">startH</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">,</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UIGraphicsPushContext</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextSetShouldSubpixelQuantizeFonts</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextBeginTransparencyLayerWithRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">rect</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textOriginX</span>  <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textOrigingY</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textWidth</span>    <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span>  <span class="o">-</span> <span class="n">shadowStrokePaddingX</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textHeight</span>   <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">width</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOriginX</span> <span class="o">=</span> <span class="n">shadowStrokePaddingX</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOriginX</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOrigingY</span> <span class="o">=</span> <span class="n">startH</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOrigingY</span> <span class="o">=</span> <span class="n">startH</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">textRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">textOriginX</span><span class="p">,</span> <span class="n">textOrigingY</span><span class="p">,</span> <span class="n">textWidth</span><span class="p">,</span> <span class="n">textHeight</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasStroke</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CGContextSetTextDrawingMode</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">kCGTextStroke</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">s_isIOS7OrHigher</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">NSMutableParagraphStyle</span> <span class="o">*</span><span class="n">paragraphStyle</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableParagraphStyle</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>                <span class="n">paragraphStyle</span><span class="p">.</span><span class="n">alignment</span> <span class="o">=</span> <span class="n">align</span><span class="p">;</span>
</span><span class='line'>                <span class="n">paragraphStyle</span><span class="p">.</span><span class="n">lineBreakMode</span> <span class="o">=</span> <span class="n">NSLineBreakByWordWrapping</span><span class="p">;</span>
</span><span class='line'>                <span class="p">[</span><span class="n">str</span> <span class="nl">drawInRect:</span><span class="n">textRect</span> <span class="nl">withAttributes:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>                                                      <span class="nl">NSFontAttributeName:</span> <span class="n">font</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="nl">NSStrokeWidthAttributeName:</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span> <span class="o">/</span> <span class="n">nSize</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">],</span>
</span><span class='line'>                                                      <span class="nl">NSForegroundColorAttributeName:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorR</span>
</span><span class='line'>                                                                                                     <span class="nl">green:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorG</span>
</span><span class='line'>                                                                                                      <span class="nl">blue:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorB</span>
</span><span class='line'>                                                                                                     <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">],</span>
</span><span class='line'>                                                      <span class="nl">NSParagraphStyleAttributeName:</span><span class="n">paragraphStyle</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="nl">NSStrokeColorAttributeName:</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorR</span>
</span><span class='line'>                                                                                                  <span class="nl">green:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorG</span>
</span><span class='line'>                                                                                                   <span class="nl">blue:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorB</span>
</span><span class='line'>                                                                                                  <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">]</span>
</span><span class='line'>                                                      <span class="p">}</span>
</span><span class='line'>                 <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">[</span><span class="n">paragraphStyle</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">CGContextSetRGBStrokeColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorR</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorG</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorB</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//original code that was not working in iOS 7</span>
</span><span class='line'>                <span class="p">[</span><span class="n">str</span> <span class="nl">drawInRect:</span> <span class="n">textRect</span> <span class="nl">withFont:</span><span class="n">font</span> <span class="nl">lineBreakMode:</span><span class="n">NSLineBreakByWordWrapping</span> <span class="nl">alignment:</span><span class="n">align</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// take care of shadow if needed</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasShadow</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CGSize</span> <span class="n">offset</span><span class="p">;</span>
</span><span class='line'>            <span class="n">offset</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>            <span class="n">offset</span><span class="p">.</span><span class="n">width</span>  <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>            <span class="n">CGContextSetShadow</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowBlur</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// normal fonts</span>
</span><span class='line'>        <span class="c1">//if( [font isKindOfClass:[UIFont class] ] )</span>
</span><span class='line'>        <span class="c1">//{</span>
</span><span class='line'>        <span class="c1">//    [str drawInRect:CGRectMake(0, startH, dim.width, dim.height) withFont:font lineBreakMode:(UILineBreakMode)UILineBreakModeWordWrap alignment:align];</span>
</span><span class='line'>        <span class="c1">//}</span>
</span><span class='line'>        <span class="c1">//else // ZFont class</span>
</span><span class='line'>        <span class="c1">//{</span>
</span><span class='line'>        <span class="c1">//    [FontLabelStringDrawingHelper drawInRect:str rect:CGRectMake(0, startH, dim.width, dim.height) withZFont:font lineBreakMode:(UILineBreakMode)UILineBreakModeWordWrap </span>
</span><span class='line'>        <span class="c1">////alignment:align];</span>
</span><span class='line'>        <span class="c1">//}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//------------------------------------------------------------------------------------</span>
</span><span class='line'>        <span class="c1">// actually draw the text in the context</span>
</span><span class='line'>        <span class="c1">// XXX: ios7 casting</span>
</span><span class='line'>        <span class="c1">//[str drawInRect:CGRectMake(textOriginX, textOrigingY, textWidth, textHeight) withFont:font lineBreakMode:NSLineBreakByWordWrapping alignment:(NSTextAlignment)align];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextSetTextDrawingMode</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">kCGTextFill</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// actually draw the text in the context</span>
</span><span class='line'>        <span class="p">[</span><span class="n">str</span> <span class="nl">drawInRect:</span> <span class="n">textRect</span> <span class="nl">withFont:</span><span class="n">font</span> <span class="nl">lineBreakMode:</span><span class="n">NSLineBreakByWordWrapping</span> <span class="nl">alignment:</span><span class="n">align</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextEndTransparencyLayer</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// pop the context</span>
</span><span class='line'>        <span class="n">UIGraphicsPopContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// release the context</span>
</span><span class='line'>        <span class="n">CGContextRelease</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// output params</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">data</span>                 <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasAlpha</span>             <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">isPremultipliedAlpha</span> <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">bitsPerComponent</span>     <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">width</span>                <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">height</span>               <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bRet</span>                        <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改完上述两个文件，Cococs2d-x 2.x版本就能完美支持外描边啦。</p>

<hr />

<p>2015/6/2更新1：更新CCImage.mm代码，修正字体阴影的错误。(在安卓平台上阴影的支持可能有问题，暂未测试。)</p>

<p>2015/6/2更新2：前几天Byron Song同学反应描边有问题，经过测试，按下面写法，能够得到正确的描边和阴影效果的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>
</span><span class='line'><span class="n">TTFFontShadowAndStroke</span><span class="o">::</span><span class="n">TTFFontShadowAndStroke</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCLayerColor</span> <span class="o">*</span><span class="n">layer</span> <span class="o">=</span> <span class="n">CCLayerColor</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">ccc4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">190</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">));</span>
</span><span class='line'>    <span class="n">addChild</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">s</span> <span class="o">=</span> <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getWinSize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">tintColorRed</span>      <span class="o">=</span>  <span class="p">{</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>   <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">tintColorYellow</span>   <span class="o">=</span>  <span class="p">{</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">tintColorBlue</span>     <span class="o">=</span>  <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span>   <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">strokeColor</span>       <span class="o">=</span>  <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">255</span>  <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">strokeShadowColor</span> <span class="o">=</span>  <span class="p">{</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">shadowOffset</span><span class="p">(</span><span class="mf">42.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">42.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ccFontDefinition</span> <span class="n">shadowTextDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_fontName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;Marker Felt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOffset</span>  <span class="o">=</span> <span class="n">shadowOffset</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOpacity</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowBlur</span>    <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_fontFillColor</span>   <span class="o">=</span> <span class="n">tintColorRed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// shadow only label</span>
</span><span class='line'>    <span class="n">CCLabelTTF</span><span class="o">*</span> <span class="n">fontShadow</span> <span class="o">=</span> <span class="n">CCLabelTTF</span><span class="o">::</span><span class="n">createWithFontDefinition</span><span class="p">(</span><span class="s">&quot;Shadow Only Red Text&quot;</span><span class="p">,</span> <span class="n">shadowTextDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// add label to the scene</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">fontShadow</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fontShadow</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="o">*</span><span class="mf">2.5</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create the stroke only label</span>
</span><span class='line'>    <span class="n">ccFontDefinition</span> <span class="n">strokeTextDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_fontName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;Marker Felt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeEnabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeColor</span>   <span class="o">=</span> <span class="n">strokeColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeSize</span>    <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_fontFillColor</span>   <span class="o">=</span> <span class="n">tintColorYellow</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// stroke only label</span>
</span><span class='line'>    <span class="n">CCLabelTTF</span><span class="o">*</span> <span class="n">fontStroke</span> <span class="o">=</span> <span class="n">CCLabelTTF</span><span class="o">::</span><span class="n">createWithFontDefinition</span><span class="p">(</span><span class="s">&quot;Stroke Only Red Text&quot;</span><span class="p">,</span> <span class="n">strokeTextDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// add label to the scene</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">fontStroke</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fontStroke</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="o">*</span><span class="mf">1.8</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create the label stroke and shadow</span>
</span><span class='line'>    <span class="n">ccFontDefinition</span> <span class="n">strokeShaodwTextDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_fontName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;Marker Felt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeColor</span>   <span class="o">=</span> <span class="n">strokeShadowColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeSize</span>    <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOffset</span>  <span class="o">=</span> <span class="n">shadowOffset</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOpacity</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowBlur</span>    <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_fontFillColor</span>   <span class="o">=</span> <span class="n">tintColorBlue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// shadow + stroke label</span>
</span><span class='line'>    <span class="n">CCLabelTTF</span><span class="o">*</span> <span class="n">fontStrokeAndShadow</span> <span class="o">=</span> <span class="n">CCLabelTTF</span><span class="o">::</span><span class="n">createWithFontDefinition</span><span class="p">(</span><span class="s">&quot;Stroke &amp; Shadow Blue Text&quot;</span><span class="p">,</span> <span class="n">strokeShaodwTextDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// add label to the scene</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">fontStrokeAndShadow</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fontStrokeAndShadow</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="o">*</span><span class="mf">1.1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何绑定LUA_FUNCTION]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/09/22/how-to-bind-lua-function/"/>
    <updated>2014-09-22T16:15:34+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/09/22/how-to-bind-lua-function</id>
    <content type="html"><![CDATA[<p>今天在项目中尝试在C++代码中调用Lua中的function，实现的逻辑是先在Lua代码中调用C++函数注册自己的handler，然后在需要时由C++调用这个handler，触发Lua中的function。</p>

<p>这个流程可以参照CCLayer中的实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//Step 1:</span>
</span><span class='line'><span class="c1">//注册handler函数，需要由tolua++绑定，在lua代码中调用</span>
</span><span class='line'><span class="kt">void</span> <span class="n">CCLayer</span><span class="o">::</span><span class="n">registerScriptTouchHandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">nHandler</span><span class="p">,</span> <span class="n">bool</span> <span class="n">bIsMultiTouches</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nPriority</span><span class="p">,</span> <span class="n">bool</span> <span class="n">bSwallowsTouches</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Step 2:</span>
</span><span class='line'><span class="c1">//由LuaEngine执行该handler对应的Lua Function</span>
</span><span class='line'><span class="kt">int</span> <span class="n">CCLayer</span><span class="o">::</span><span class="n">excuteScriptTouchHandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">nEventType</span><span class="p">,</span> <span class="n">CCTouch</span> <span class="o">*</span><span class="n">pTouch</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">CCScriptEngineManager</span><span class="o">::</span><span class="n">sharedManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getScriptEngine</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">executeLayerTouchEvent</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">nEventType</span><span class="p">,</span> <span class="n">pTouch</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//executeLayerTouchEvent方法中执行handler的代码</span>
</span><span class='line'><span class="n">m_stack</span><span class="o">-&gt;</span><span class="n">executeFunctionByHandler</span><span class="p">(</span><span class="n">nHandler</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>在这个流程中，handler是至关重要的，LuaEngine需要知道这个handler，才可以正确执行对应的Lua Function。那么我们现在的问题就是如何才能获得Lua Function的句柄呢？</p>

<p>如果我们还是按照以前的经验，在pkg文件中，将registerScriptTouchHandler函数的第一个参数声明为int类型，那么由tolua++生成的绑定代码仍然会认为第一个参数是int类型，如果在Lua代码中调用这个函数，第一个参数是Lua Function，就会报错。</p>

<p>那该如何呢？</p>

<p>我们需要在pkg文件中将该函数的第一个参数标记为LUA_FUNCTION类型（而不是int类型），这个LUA_FUNCTION类型在CCLuaValue.h中声明。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">LUA_FUNCTION</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>pkg文件中该函数的声明如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">registerScriptTouchHandler</span><span class="p">(</span><span class="n">LUA_FUNCTION</span> <span class="n">nHandler</span><span class="p">,</span> <span class="n">bool</span> <span class="n">bIsMultiTouches</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nPriority</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bool</span> <span class="n">bSwallowsTouches</span> <span class="o">=</span> <span class="nb">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当pkg文件该参数标记为LUA_FUNCTION类型后，tolua++生成的绑定代码中会把第一个参数认为是Lua Function，会获取该function的句柄，传给registerScriptTouchHandler函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">LUA_FUNCTION</span> <span class="n">nHandler</span> <span class="o">=</span> <span class="n">toluafix_ref_function</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是registerScriptTouchHandler函数完整的绑定代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/* method: registerScriptTouchHandler of class  CCLayer */</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_DISABLE_tolua_Cocos2d_CCLayer_registerScriptTouchHandler00</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">tolua_Cocos2d_CCLayer_registerScriptTouchHandler00</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">tolua_S</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'> <span class="n">tolua_Error</span> <span class="n">tolua_err</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isusertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;CCLayer&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="p">(</span><span class="n">tolua_isvaluenil</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">toluafix_isfunction</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s">&quot;LUA_FUNCTION&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">))</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isboolean</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isnumber</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isboolean</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isnoobj</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span>
</span><span class='line'> <span class="p">)</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">tolua_lerror</span><span class="p">;</span>
</span><span class='line'> <span class="k">else</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="n">CCLayer</span><span class="o">*</span> <span class="n">self</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCLayer</span><span class="o">*</span><span class="p">)</span>  <span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">LUA_FUNCTION</span> <span class="n">nHandler</span> <span class="o">=</span> <span class="p">(</span>  <span class="n">toluafix_ref_function</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">bIsMultiTouches</span> <span class="o">=</span> <span class="p">((</span><span class="kt">bool</span><span class="p">)</span>  <span class="n">tolua_toboolean</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="kc">false</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nPriority</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span>  <span class="n">tolua_tonumber</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">bSwallowsTouches</span> <span class="o">=</span> <span class="p">((</span><span class="kt">bool</span><span class="p">)</span>  <span class="n">tolua_toboolean</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="kc">false</span><span class="p">));</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">)</span> <span class="n">tolua_error</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="s">&quot;invalid &#39;self&#39; in function &#39;registerScriptTouchHandler&#39;&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="n">self</span><span class="o">-&gt;</span><span class="n">registerScriptTouchHandler</span><span class="p">(</span><span class="n">nHandler</span><span class="p">,</span><span class="n">bIsMultiTouches</span><span class="p">,</span><span class="n">nPriority</span><span class="p">,</span><span class="n">bSwallowsTouches</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'> <span class="nl">tolua_lerror:</span>
</span><span class='line'> <span class="n">tolua_error</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="s">&quot;#ferror in function &#39;registerScriptTouchHandler&#39;.&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">);</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">//#ifndef TOLUA_DISABLE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lua代码中可以以下面形式调用registerScriptTouchHandler这个函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">handler</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">method</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="err">…</span><span class="p">)</span> <span class="k">return</span> <span class="n">method</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="err">…</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">object</span><span class="p">:</span> <span class="n">registerScriptTouchHandler</span><span class="p">(</span><span class="n">handler</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">object</span><span class="p">.</span><span class="n">functionOne</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何时使用tolua.cast]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/09/19/how-to-use-tolua-dot-cast/"/>
    <updated>2014-09-19T10:45:15+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/09/19/how-to-use-tolua-dot-cast</id>
    <content type="html"><![CDATA[<p>之前一直没去关心这个问题，觉得只要按照代码示例照做就好。今天暂时梳理了下这个函数。</p>

<p>下面是tolua 手册中对这个函数的定义：
tolua.cast (var, type)：Changes the metatable of var in order to make it of type type. type needs to be a string with the complete C type of the object (including namespaces, etc).</p>

<p>它所对应的C语言实现在tolua_map.c中</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Type casting</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_bnd_cast</span> <span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lua_islightuserdata</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">tolua_touserdata</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">tolua_tostring</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="n">tolua_pushusertype</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">lua_pushnil</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到，tolua.cast实际上是把var的类型转成目标类型，那什么时候需要用到它呢。如果我们需要在Lua中使用C++代码中传过来的CCArray对象，我们直接在Lua中调用该对象的方法即可，因为tolua已经设置该对象的metatable为CCArray类型。但是如果想要使用CCArray对象中存储的对象，比如说该数组中有2个CCString对象，我们获取其中一个对象时，tolua会把该对象设置为CCObject类型，这时候就需要我们把该对象转为CCString类型，才能使用CCString的方法。tolua.cast其实就像C++的dynamic_cast，用于类层次间的上行转换和下行转换，在执行期决定真正的类型。</p>

<p>下面是Lua代码示例，希望有助于理解。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">--commands 是 一个CCArray对象，里面存着CCString对象</span>
</span><span class='line'><span class="k">function</span> <span class="nf">object</span><span class="p">:</span><span class="n">onStart</span><span class="p">(</span> <span class="n">commands</span> <span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">count</span> <span class="o">=</span> <span class="n">commands</span><span class="p">:</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">command0</span> <span class="o">=</span> <span class="n">commands</span><span class="p">:</span><span class="n">objectAtIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">length</span> <span class="o">=</span> <span class="n">tolua</span><span class="p">.</span><span class="n">cast</span><span class="p">(</span><span class="n">command0</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">CCString&quot;</span><span class="p">):</span><span class="n">length</span><span class="p">()</span>
</span><span class='line'>      <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">the first string length is &quot;</span> <span class="o">..</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua绑定对C++函数不同类型形参的处理]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/09/12/how-tolua-bind-multiple-type-formal-parameter/"/>
    <updated>2014-09-12T11:31:18+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/09/12/how-tolua-bind-multiple-type-formal-parameter</id>
    <content type="html"><![CDATA[<p>在Lua中调用C++函数时，产生过一个疑问，C++函数的形参有可能是指针，也可能是引用，或者是按值传递的，在Lua里面，需要针对这些参数进行特殊处理吗？</p>

<p>今天看了下tolua++绑定后的代码，发现绑定代码已经进行转化过了，在Lua中只要传入Lua value就好。</p>

<p>举例来说，bool CCScale9Sprite::initWithFile(const char* file, CCRect rect) 这个方法形参既有指针，也有按值传递，通过tolua++绑定后，lua实际调用的函数会是怎么样的呢？</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* method: initWithFile of class  CCScale9Sprite */</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_DISABLE_tolua_Cocos2d_CCScale9Sprite_initWithFile01</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_Cocos2d_CCScale9Sprite_initWithFile01</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">tolua_S</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="n">tolua_Error</span> <span class="n">tolua_err</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isusertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;CCScale9Sprite&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isstring</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="p">(</span><span class="n">tolua_isvaluenil</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">tolua_isusertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="s">&quot;CCRect&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">))</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isnoobj</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span>
</span><span class='line'> <span class="p">)</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">tolua_lerror</span><span class="p">;</span>
</span><span class='line'> <span class="k">else</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="n">CCScale9Sprite</span><span class="o">*</span> <span class="n">self</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCScale9Sprite</span><span class="o">*</span><span class="p">)</span>  <span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">file</span> <span class="o">=</span> <span class="p">((</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span>  <span class="n">tolua_tostring</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="n">CCRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="n">CCRect</span><span class="o">*</span><span class="p">)</span>  <span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">)</span> <span class="n">tolua_error</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="s">&quot;invalid &#39;self&#39; in function &#39;initWithFile&#39;&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="n">bool</span> <span class="n">tolua_ret</span> <span class="o">=</span> <span class="p">(</span><span class="n">bool</span><span class="p">)</span>  <span class="n">self</span><span class="o">-&gt;</span><span class="n">initWithFile</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="n">rect</span><span class="p">);</span>
</span><span class='line'>   <span class="n">tolua_pushboolean</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,(</span><span class="n">bool</span><span class="p">)</span><span class="n">tolua_ret</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nl">tolua_lerror:</span>
</span><span class='line'> <span class="k">return</span> <span class="n">tolua_Cocos2d_CCScale9Sprite_initWithFile00</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">//#ifndef TOLUA_DISABLE</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面代码，可以看到，tolua_tostring 和 tolua_tousertype 返回的其实都是指针，第一个参数需要的是指针，因此直接将file传入就好，第二个参数需要的是值，因此第17行代码对指针做了 解引用 处理。因此在Lua代码中，只需要传入Lua value就好，不需要关心实际C++函数需要的是指针还是值，或者引用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Lua中如何调用带字符参数的C++函数]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/09/11/pass-lua-value-to-c-plus-plus-fuction/"/>
    <updated>2014-09-11T16:40:20+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/09/11/pass-lua-value-to-c-plus-plus-fuction</id>
    <content type="html"><![CDATA[<p>之前一直有一个疑问，在Lua中调用一个C++函数，如果函数的形参是const char* 或者 std::string 类型，能否直接传入一个Lua的string值呢？</p>

<p>今天仔细看了下通过tolua++绑定后的代码，发现绑定代码会将lua的string值转成C++函数指定的字符类型，不管是const char* 还是std::string。</p>

<p>比如说CCDictionary中的CCObject* objectForKey(const std::string&amp; key)，这个成员函数需要const std::string的引用。那么经过tolua++绑定后，lua中调用这个函数实际又会执行什么样的代码呢。</p>

<!--more-->


<p>下面就是绑定后的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* method: objectForKey of class  CCDictionary */</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_DISABLE_tolua_Cocos2d_CCDictionary_objectForKey00</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_Cocos2d_CCDictionary_objectForKey00</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">tolua_S</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'> <span class="n">tolua_Error</span> <span class="n">tolua_err</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isusertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;CCDictionary&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_iscppstring</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isnoobj</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span>
</span><span class='line'> <span class="p">)</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">tolua_lerror</span><span class="p">;</span>
</span><span class='line'> <span class="k">else</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">self</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCDictionary</span><span class="o">*</span><span class="p">)</span>  <span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">key</span> <span class="o">=</span> <span class="p">((</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">)</span>  <span class="n">tolua_tocppstring</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">)</span> <span class="n">tolua_error</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="s">&quot;invalid &#39;self&#39; in function &#39;objectForKey&#39;&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="n">CCObject</span><span class="o">*</span> <span class="n">tolua_ret</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCObject</span><span class="o">*</span><span class="p">)</span>  <span class="n">self</span><span class="o">-&gt;</span><span class="n">objectForKey</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nID</span> <span class="o">=</span> <span class="p">(</span><span class="n">tolua_ret</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">tolua_ret</span><span class="o">-&gt;</span><span class="n">m_uID</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">*</span> <span class="n">pLuaID</span> <span class="o">=</span> <span class="p">(</span><span class="n">tolua_ret</span><span class="p">)</span> <span class="o">?</span> <span class="o">&amp;</span><span class="n">tolua_ret</span><span class="o">-&gt;</span><span class="n">m_nLuaID</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">toluafix_pushusertype_ccobject</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span> <span class="n">nID</span><span class="p">,</span> <span class="n">pLuaID</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">tolua_ret</span><span class="p">,</span><span class="s">&quot;CCObject&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">tolua_pushcppstring</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'> <span class="nl">tolua_lerror:</span>
</span><span class='line'> <span class="n">tolua_error</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="s">&quot;#ferror in function &#39;objectForKey&#39;.&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">);</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">//#ifndef TOLUA_DISABLE</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面代码中，我们可以看到,第17行tolua_tocppstring这个方法会把lua stack中的lua value 转成std::string。</p>

<p>再比如CCLabelTTF中的virtual void setString(const char label)，这个成员函数需要一个const char的值，那我们看看tolua++绑定后的实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* method: setString of class  CCLabelTTF */</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_DISABLE_tolua_Cocos2d_CCLabelTTF_setString00</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_Cocos2d_CCLabelTTF_setString00</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">tolua_S</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'> <span class="n">tolua_Error</span> <span class="n">tolua_err</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isusertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;CCLabelTTF&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isstring</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>     <span class="o">!</span><span class="n">tolua_isnoobj</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">)</span>
</span><span class='line'> <span class="p">)</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">tolua_lerror</span><span class="p">;</span>
</span><span class='line'> <span class="k">else</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="n">CCLabelTTF</span><span class="o">*</span> <span class="n">self</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCLabelTTF</span><span class="o">*</span><span class="p">)</span>  <span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">label</span> <span class="o">=</span> <span class="p">((</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span>  <span class="n">tolua_tostring</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">)</span> <span class="n">tolua_error</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="s">&quot;invalid &#39;self&#39; in function &#39;setString&#39;&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="n">self</span><span class="o">-&gt;</span><span class="n">setString</span><span class="p">(</span><span class="n">label</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifndef TOLUA_RELEASE</span>
</span><span class='line'> <span class="nl">tolua_lerror:</span>
</span><span class='line'> <span class="n">tolua_error</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span><span class="s">&quot;#ferror in function &#39;setString&#39;.&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tolua_err</span><span class="p">);</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">//#ifndef TOLUA_DISABLE</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面代码中，我们可以看到，第17行tolua_tostring这个方法会把lua stack中的lua value 转成const char*。</p>

<p>因此可以得出结论：Lua中调用C++函数，不管参数需要的std::string 还是 const char*类型，只要传入Lua string值即可。</p>

<p>在当前基础上，再稍微拓展一下，因为Lua在运行期会对string、number值进行自动转换，因此即使传入一个lua number值，也会被转换成Lua string值。所以，上述的结论可以改为：Lua中调用C++函数，不管参数需要的std::string 还是 const char*类型，只要传入Lua string值或number值即可。</p>

<p>另外如果C++函数需要的是CCString*，我们还是老老实实的在Lua中创建一个CCString对象，然后把对象的指针传入这个C++函数，因为CCString对象在Lua中被认为是userdata类型，跟一般的C++对象是一致的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遇见error C2065:未声明的标识符错误]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/08/26/errorc2065/"/>
    <updated>2014-08-26T10:39:08+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/08/26/errorc2065</id>
    <content type="html"><![CDATA[<p>昨天在编译Lua绑定代码的时候，出现了这个编译错误，一般来说，只要引入正确的头文件，就能避免这个错误。奇怪的是，头文件明明已经正确引入了，但是编译去无法通过，vs始终提示我的自定义类为未定义标识符，百思不得其解。折腾了两个小时，才发现原来这个自定义类使用了名称空间，只要在头文件中使用using 关键字将名称空间引入即可。</p>

<p>解决完这个问题，觉得悔恨不已，竟然因为这样的小疏忽浪费了这么多的时间。原因有二，一来自己C++功底尚浅，出了问题，始终为想到因为名称空间导致了，当时还在猜测是不是因为什么特殊字符之类的。二、未好好利用搜索引擎，当时在网上搜索到了导致这个错误的几个原因，就是没提到名称空间，自己也没再去搜索更多的答案，反而今天早上一搜索就搜到了一篇博文提到名称空间也会导致这个问题，无语，只能说明昨天没用好搜索引擎。继续努力吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua 面向对象实现(Part I)]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/08/21/learn-lua-object/"/>
    <updated>2014-08-21T19:51:24+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/08/21/learn-lua-object</id>
    <content type="html"><![CDATA[<p>接触Lua已经有一年的，但是一直对Lua的面向对象实现一知半解，全赖wp同学的工作，我们可以不用管具体的细节，把项目顺利完成。不过有东西一直一知半解，总觉得难受，于是趁这几天有空，把这块知识点好好梳理了一番。</p>

<p>一、Lua Table 模拟面向对象实现</p>

<p>Lua本身并不是面向对象的语言，没有面向对象语言的类、继承、多态等特性，但是凭借其自身强大的table特性，类、继承、多态等特性能够在Lua中被模拟出来。</p>

<p>Table是Lua八种基础类型中的一种，也是最重要的特性之一，其他语言中的数组，字典，在Lua中都可以通过Table来实现。</p>

<!--more-->


<p>在Lua中，每一种类型自身都有一个metatable，中文翻译成元表，它的作用在于提供了一种改变对象默认行为的途径，Lua中每种类型都有默认的操作方式，比如说数字的加减乘除，字符串的连接等，当两个数字相加，比如a+b，Lua会先查看a的metatable，看里面<em><em>add有没有定义，如果没有定义，则调用默认的+规则，否则会调用</em>add来执行+的操作。又比如两个table值默认是不支持+操作的，但是通过定义metable中的</em>add，我们可以实现表的相加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">--定义2个表</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">}</span>
</span><span class='line'><span class="c1">--用c来做Metatable</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="c1">--重定义加法操作</span>
</span><span class='line'><span class="n">c</span><span class="p">.</span><span class="n">__add</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">op1</span><span class="p">,</span> <span class="n">op2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">item</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">op2</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">table.insert</span><span class="p">(</span><span class="n">op1</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">op1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">--将a的Metatable设置为c</span>
</span><span class='line'><span class="nb">setmetatable</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="c1">--d现在的样子是{5,6,7,8}</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Metatable不光提供__add域，还提供了其他操作域，如下面所列的这些。</p>

<p>add, sub, mul, div, mod, pow, unm, concat, len, eq, lt, le, tostring, gc, index, newindex, call…</p>

<p>在上述这些操作域中，index是Lua能够成功模拟面向对象特性的关键，index提供了表的索引值入口，当表要索引一个值时如table[key], Lua会首先在table本身中查找key的值, 如果没有，且这个table被定义过Metatable，且Metatable中index域也被定义过，则Lua会按照index所定义的来查找，__index可以是函数也可以是一个table。这种行为不正与面向对象的继承很类似吗，调用一个对象的方法，如果这个方法在对象所属的类中没有定义，就自动去父类查找。</p>

<p>通过这种方式，也可以模拟实现类的概念，Lua中每个table都是一个对象，但是通过metatable，Lua可以把一个对象实现类的功能，下面是Programming In Lua中的例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">Bird</span> <span class="o">=</span> <span class="p">{</span><span class="n">CanFly</span> <span class="o">=</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'><span class="n">Bird</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">Bird</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">Bird</span><span class="p">:</span><span class="n">New</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">setmetatable</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">aBird</span> <span class="o">=</span> <span class="n">Bird</span><span class="p">:</span><span class="n">New</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">aBird</span><span class="p">.</span><span class="n">CanFly</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="err">“</span><span class="n">a</span> <span class="n">bird</span> <span class="n">can</span> <span class="n">fly</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>例子中的Lua对象Bird就被模拟成一个类。通过Bird:New()，每次生成一个新的lua对象（空的table），这个新的对象拥有Bird的行为。</p>

<p>那么如何实现继承呢，请看下面的例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">Crow</span> <span class="o">=</span> <span class="p">{</span><span class="n">Color</span> <span class="o">=</span> <span class="err">“</span><span class="n">black</span><span class="err">”</span><span class="p">}</span>
</span><span class='line'><span class="n">Crow</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">Crow</span>
</span><span class='line'><span class="nb">setmetatable</span><span class="p">(</span><span class="n">Crow</span><span class="p">,</span> <span class="n">Bird</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">Crow</span><span class="p">:</span><span class="n">New</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">c</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">setmetatable</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">c</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过设置setmetatable，将Crow的metatable设置为Bird，实现了继承。</p>

<p>二、Lua 对象如何模拟继承C++对象</p>

<p>在具体的Cocos2dx项目中，不同的框架对Lua对象化的实现方式也有不同。在实际项目中，Lua对象不光可能模拟“继承”自另外一个Lua对象，亦可能需要模拟“继承”自一个C++对象，这个该如何实现呢。</p>

<p>首先还得说说Metatable，因为实现模拟“继承”自C++对象，还得依赖Metatable强大的特性。在Lua Reference Manual中有提到，用户可以通过getmetatable这个方法获得任何一种Lua类型的值的Metatable，但是用户要想替换Lua值的Metatable，却是有限制的，只有table类型的值可以通过setmetatable来设置metatable，而其他类型的值要想设置metatable，通过Lua的API恐怕就无法办到（除了用debug库），必须使用C的API才能办到。</p>

<p>在Cocos2dx项目中，自定义的C++类是通过tolua来生成绑定代码，实现Lua访问C++类的属性和方法。tolua自动将C/C++ basic类型map到Lua的 basic类型中去。char, int, float, and double are mapped to the Lua type number; char<em> is mapped to string; void</em> is mapped to userdata.至于C++中的用户自定义类型，比如说struct，自定义类，在Lua中，会被map成userdata类型。</p>

<p>那么如何让Lua对象模拟继承自一个C++类呢，即模拟继承自一个userdata类型呢？在上文中有提到userdata类型的metatable是无法通过Lua API来实现的，那就没办法像模拟继承一个Lua object一样来实现。</p>

<p>幸好tolua提供了一个机制，允许我们store any additional field attached to these objects，因为这个机制，这些objects也可以被当做成传统的Lua table。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">ClassName</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'><span class="n">obj</span><span class="p">.</span><span class="n">myfield</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">--即使ClassName这个类中没有定义myfield，左边这样赋值也是成立的。</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述赋值之所以能够成立，是因为当需要时，tolua自动创建一个Lua table关联到这个对象上。因此，obj这个对象之所以能够存储C++类中没有定义过的字段，是因为这些新的字段被存到了一个伴生的table里。Lua程序员可以使用统一的方式访问C++中定义的字段和这些在Lua中新定义的字段，如果两个字段名一样（C++字段和Lua新定义字段），Lua新定义字段（方法）会覆盖掉C++中的字段（方法）(注：这个覆盖只在Lua层有效)。</p>

<p>tolua提供了一个方法让程序员可以设置这个伴生的table，即the object&rsquo;s peer table（仅支持Lua 5.1）。这个方法是 tolua.setpeer (object, peer_table) 。tolua++将这个peer table设置为object&rsquo;s envirnment table，使用lua_gettable/settable来获得或者设置这个peer table中的字段值。这个机制允许我们对自己的Lua table实现我们自己的对象系统，实现对userdata对象的继承。下面请看tolua手册中的例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- a &#39;LuaWidget&#39; class</span>
</span><span class='line'><span class="n">LuaWidget</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">LuaWidget</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">LuaWidget</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">LuaWidget</span><span class="p">:</span><span class="n">add_button</span><span class="p">(</span><span class="n">caption</span><span class="p">)</span>
</span><span class='line'><span class="c1">-- add a button to our widget here. &#39;self&#39; will be the userdata Widget</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="n">Widget</span><span class="p">()</span>
</span><span class='line'><span class="kd">local</span> <span class="n">t</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="nb">setmetatable</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">LuaWidget</span><span class="p">)</span> <span class="c1">-- make &#39;t&#39; an instance of LuaWidget</span>
</span><span class='line'>
</span><span class='line'><span class="n">tolua</span><span class="p">.</span><span class="n">setpeer</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="c1">--make &#39;t&#39; the peer table of &#39;w&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set_parent</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="c1">--we use &#39;w&#39; as the object now</span>
</span><span class='line'>
</span><span class='line'><span class="n">w</span><span class="p">:</span><span class="n">show</span><span class="p">()</span> <span class="c1">--a method from &#39;Widget&#39;</span>
</span><span class='line'><span class="n">w</span><span class="p">:</span><span class="n">add_button</span><span class="p">(</span><span class="err">“</span><span class="n">Quit</span><span class="err">”</span><span class="p">)</span> <span class="c1">--a method from LuaWidget (but we still use &#39;w&#39; to call it)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面Widget是C++类，LuaWidget是Lua类，通过tolua.setpeer，将LuaWidget的一个实例设置为w（Widget的一个实例）的peer table, 如此一来，LuaWidget可以被认为是Widget的子类，因为每次访问w的方法时，首先会去查看它的peer table有没有这个方法，如果有，就执行peer table中的方法，如果没有，才执行Widget中定义的方法。这样，就实现了Lua对象继承C++对象的“模拟”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 我的夏天]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/08/21/my-summer/"/>
    <updated>2014-08-21T13:38:07+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/08/21/my-summer</id>
    <content type="html"><![CDATA[<p>昨天写了篇看球有感，post到博客之上，这才发觉已经有三个多月没有更新过文章了，虽然总共也没写过几篇，惭愧。。</p>

<p>这三个多月，我倒是做了几件事情。</p>

<p>一、准备面试：准备面试的过程对自己能力的提高还是大有益处的，既巩固基础知识，也会接触到最新的一些技术，可以完善自己的知识结构，且提供一个重新审视自己的机会。</p>

<!--more-->


<p>二、面试：大概准备了一周，主要复习C++的知识，惭愧的是自己的C++的能力一直没有特别深入，即使是突击练习了一周，碰到笔试，面试，立马就露馅了。不过可能其他方面还让面试官比较满意，猎头推荐的几家公司，都顺利通过，猎头竟然夸我是面霸，额，如果刚一毕业就能获得这个成就就好了，晚到了很多年。</p>

<p>三、休假：在九城的后半阶段，一直处于加班加班的旋律之中，之前计划的旅游也一直没有成行。利用这次离职，于是给自己留了一周的缓冲期，回了趟家，呆了差不多8天，这大概是我大学之后在家呆得最久的一次吧，爸妈，外公外婆依旧健康，只是添了许多白发和老年斑，叹时间最无情。不知道自己是不是已经习惯了忙碌的生活，没事情也能给自己找事情做，在家的这几天，也一直忙得连轴转，不是给家里架设印字设备，就是帮外公解决电脑问题，或是帮舅舅清理电脑垃圾。短短8天，一晃而过，回到上海，又该开始新的征程。</p>

<p>四、新公司：选择加入的新公司不算大，不过技术实力比九城深厚的多，有很多在游戏行业浸淫多年的程序员，跟他们一比，自己的技术功底就相形见绌了，必须得努力再努力。加入现在的公司，还是挺偶然的，当时有名气更大的公司可以选择，比如说宝开、PPTV，只是给的米不如目前公司多，再加上这边总管一直很盛情地邀请，于是心一横，就过来了，没想到这次的选择并不差。</p>

<p>五、C++：以前说到自己的C++水平，只是只能算入门，并没有有用C++写过完整项目的经历，没想到新公司的项目是全部用C++写的，倒是给了我一个很好的学习机会。这几个月下来，回过头再看面试那会，都觉得心虚。</p>

<p>知识的学习永无止境，我当继续努力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[因为球赛而失去理智]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/08/20/angry/"/>
    <updated>2014-08-20T20:04:45+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/08/20/angry</id>
    <content type="html"><![CDATA[<p>今天观赛恒大与西悉尼的比赛，恒大以0：1输掉了比赛，比赛临近结束前，发生了一些不和谐的因素，张五爷被对手侵犯，挥手报复对手，红牌罚下，郜林因为一个莫须有的犯规，被裁判红牌罚下，最后的几分钟，本来是恒大大举压上进攻的时刻，被对手一顿胡搅蛮缠，宝贵时光白白浪费，恒大至此失去了最后的扳平希望。一直到赛后半个多小时，我仍然心绪难平，愤怒无比，静下心来深思为何如此，竟因为这样而有点失去理智，实在不应该。一个在电脑屏幕前观赛的球迷尚且如此，遑论那些在球场里拼搏的球员们了，真是硬生生的中了对手激将大法。</p>

<p>为何如此愤怒，如果刚开赛，对手就使用这招，恐怕毫无作用，但经过接近90分钟的鏖战，恒大久攻不下，憋了一肚子的火，而且被人蒙进一球，更添怒火，正欲大举进攻，结果硬生生的被场外因素给阻住了，队员们一瞬间就失控了，甚至里皮都跑进场来理论，此时胜负已分。西悉尼赢得了比赛，却没有赢得我的尊重，最后使用的手段太过卑劣，就像武侠小说里面使用石灰粉的往对手眼睛上撒的跳梁小丑，最多得手一两次，终会被真正的高手砍落马下。</p>

<p>恒大呀，为何迪亚曼迪还是无法发挥作用，如果早早领先，何至于被人最后来这一出，为恒大心急。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[昨日两大新闻]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/05/17/zuo-ri-liang-da-xin-wen/"/>
    <updated>2014-05-17T06:10:12+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/05/17/zuo-ri-liang-da-xin-wen</id>
    <content type="html"><![CDATA[<p>第一个是黄海波嫖娼被抓，又一个荧幕好男人毁了。。
第二个是得知项目组要解散了，虽然早知道游戏行将就木，但是得到确切消息，还是心情无比低落。。</p>

<p>生活总得继续，失落一下就好，今天该发奋继续前行。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记之代码复查]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/02/21/du-shu-bi-ji-zhi-dai-ma-fu-cha/"/>
    <updated>2014-02-21T22:16:23+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/02/21/du-shu-bi-ji-zhi-dai-ma-fu-cha</id>
    <content type="html"><![CDATA[<p>前一段时间买了这本代码大全2，厚厚一大本，最近每天基本都要加班，于是早上或者晚上抽空翻一翻。今天看到一段文字，无比认同，忍不住摘录下来分享。</p>

<p>摘录（协同构建有利于传授公司文化以及编程专业知识）：</p>

<blockquote><p>复查是一个很重要的机制，它可以让程序员得到关于他们自己代码的反馈。<br/>程序员除了需要得到他们是否很好地遵循了标志的反馈之外，还需要得到程序设计主观方面的反馈，例如格式、注释、变量名、局部变量和全局变量的使用、设计方法以及“我们这里采用的解决方法”等。刚出道的编程人员需要那些有更丰富知识的前辈给予指导，而资深程序员们往往太忙而没时间同他人分享他们的知识。复查为这两种人提供了一个技术交流的平台，所以，无论在未来还是现在，复查都是培养新人以提高代码质量的好机会。</p></blockquote>


<p>在平时工作中，我们有时候会抱怨现在公司没有太多的技术氛围，其实在同一个项目组内，程序员与程序员之间还是存在很多沟通的盲区，往往每位程序员负责一个独立的模块，如果有空，相互之间分享各自模块的设计思路，互通有无，也是极好的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014新年展望]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/02/08/2014xin-nian-zhan-wang/"/>
    <updated>2014-02-08T15:46:53+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/02/08/2014xin-nian-zhan-wang</id>
    <content type="html"><![CDATA[<p>今天是大年初九，我在东港的农村，早上下了一场雪，对一个南方人来说，下雪毕竟是稀罕事，而且是一场不小的雪，拉开窗帘，远处的田野与小山，都似披上了白色的丝绸，心里有些小激动，拿上相机，披上棉袄，出去来个踏雪采风。嘿嘿。在外面拍了大概半个小时，因为全身武装的挺好，也不觉得冷，只是惋惜自己拍摄技术糟糕，糟蹋了美景。在这边住了将近一周，越来越觉得这里才是纯粹的农村，对比已经变成脏乱差的城乡结合部的老家，这里的宁静是我向往的。明天就要出发回上海啦，我估计还是时时想起这里，早晨，太阳刚刚上山，暖暖的阳光越过冒着炊烟的民居，洒落在盖着厚厚一层白雪的马路上，雪地里依稀能见野狗野猫的足迹。</p>

<!--more-->


<p>下午，与公司同事的QQ对话，把我又拉回了紧张的项目开发中，项目经理的第一句话就是“回来之后做好周末加班的准备吧”，心里顿时一紧，有点无奈，年前疲于奔命，年后看来也要疲于奔命了，为什么？为什么总有完不成的开发需求，到底哪些是有用的，又有哪些是画蛇添足的？做为一名普通的玩家，如果一个游戏的核心没有做好，任何其他华丽的附加功能又有什么用呢？增加一个附加功能和增加十个附加功能又有什么区别呢？我觉得我的游戏核心功能还是不错的，但是离完美还是有些距离的，然而现在策划们却把更多的心思放到了那些附加功能，我理解他们也有他们的难处，只是舍本逐末如果走的太远，这个游戏就会废了吧。</p>

<p>说回正题，谈谈新年展望。做开发已经有两年了，做过app的开发，也做过游戏的开发，也涉足过安卓游戏的领域，接触的越多，学的越多，越发觉得自己知识的浅薄，相对于眼前庞大的计算机世界，自己懂得也就是个皮毛。新的一年，首要的还是学习，问题是要学什么，可选择的内容实在太多，精力有限，必须有所侧重。</p>

<ol>
<li>我本非计算机专业出身，觉得自己最缺的还是那些计算机基础课的系统学习。算法与数据结构仍旧是最需要加强的。</li>
<li>自己目前做的2D游戏，使用的是cocos2d-x的游戏框架，虽然能够熟练的使用，但是对框架的底层原理了解还是不多，新的一年，应该多花一些时间在底层的钻研上。</li>
<li>去年花了一段时间在学习OpenGL，但是依旧是一知半解，一方面原因是时间花的不够，而且没有实际项目的锻炼，仅仅通过例子的学习是远远不够的。如何学习这方面的知识还是需要摸索。</li>
<li>我目前能够使用C、C++、Objective-C、Lua，对于这几门语言，惭愧的讲，目前的水平只是能够在项目中使用它们，谈不上深入了解。新的一年，需要多多深入学习它们。</li>
<li>自从做了游戏之后，对于UIKit的学习反而荒废了，iOS7的出现，突然让我发觉自己对iOS的了解回到了解放前。从年前开始，我已经着手开发一款支持iOS7的app，通过实践来熟悉新的API，并且温故以前UIKit的知识。原本计划这款app能够在年前上线，只是苦于自己设计与美术的短板，总无法满意目前的版本，待公司目前的项目告一段落，好好再花时间在这个app上。</li>
<li>我觉得一个程序员不光要懂得编程语言本身的语法知识，还需要学习如何使用他们，正所谓编程的艺术，这门学问还是挺博大精深的。前段时间看前辈云凤的博客，他推荐了一本书，叫《代码大全》，一本大部头，我觉得自己没有办法系统的一次性啃下这本书，但是利用零碎时间翻一翻，每次学习一点自己感兴趣的小章节，还是不错的。</li>
</ol>


<p>上述这些内容是我暂时能够想到的，这些只是书本上面的知识。作为一个游戏开发的参与者，行业的动态还是必须持续关注的。游戏这个行业实在发展的太快，每天都有很多新游戏推出，每天都有游戏大红大紫，在写这篇博客的这几天，就有一款叫Flappy Bird的小游戏，从默默无闻到独占全球几乎所有国家的Appstore免费排行榜头把交椅，再到开发者无法忍受出名后的烦恼，自主下架。接着无数抄袭游戏推出，顺利占据排行榜前十。真似万花筒般，让人眼花缭乱。身处这个行业，必须学会适应，努力博得一席之地。</p>

<p>P.S 这篇短短的博文从大年初九开始写的，那时候还在女朋友的家里，一直到大年十六才完成，中间一直没有太多空的时间来静下来梳理，大年十一早上一下飞机，就去公司接着加班，一直到昨天，元宵节，每天都是晚上十点钟的节奏，实在觉得很累，身体有点受不了。我觉得这种忙碌的开发节奏对程序员是有害的，不光身体受不了，对程序员的成长也是毫无好处的，亦如跑步，每次跑一段距离，总得停下来，休息一下，补充一下，然后再上路，才能更好更持续地完成后面的征途，如果一直不断的跑，到后面就无法会趴下了吧。我这里所指的休息补充，一方面是指身体，另一方面是指知识，现在的节奏，休息补充的时间实在太少。今后，希望利用自己有限的话语权争取更多的休息补充时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的开始]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/01/30/xin-de-kai-shi/"/>
    <updated>2014-01-30T11:24:01+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/01/30/xin-de-kai-shi</id>
    <content type="html"><![CDATA[<p>通过写博客来记录自己的成长，出发。。</p>
]]></content>
  </entry>
  
</feed>
