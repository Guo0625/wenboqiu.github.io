<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[编程小站]]></title>
  <link href="http://wenboqiu.github.io/atom.xml" rel="self"/>
  <link href="http://wenboqiu.github.io/"/>
  <updated>2016-01-24T21:14:05+08:00</updated>
  <id>http://wenboqiu.github.io/</id>
  <author>
    <name><![CDATA[Wenbo Qiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决Texturepacker命令行无法在Jenkins下使用的问题]]></title>
    <link href="http://wenboqiu.github.io/blog/2015/12/26/fix-texturepacker-in-jenkins/"/>
    <updated>2015-12-26T21:11:19+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2015/12/26/fix-texturepacker-in-jenkins</id>
    <content type="html"><![CDATA[<p>最近尝试在项目中使用Jenkins，即持续集成。不过在Shell脚本中使用TexturePacker的打包命令时，却无法成功，不管是Mac还是Windows，都会出现同样的提示。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">You</span> <span class="n">must</span> <span class="n">agree</span> <span class="n">to</span> <span class="n">the</span> <span class="n">license</span> <span class="n">agreement</span> <span class="n">before</span> <span class="n">using</span> <span class="n">TexturePacker</span><span class="p">.</span> <span class="n">Please</span> <span class="n">run</span> <span class="n">the</span> <span class="n">graphical</span> <span class="n">user</span> <span class="n">interface</span> <span class="n">and</span> <span class="n">accept</span> <span class="n">the</span> <span class="n">license</span> <span class="n">terms</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>奇怪，明明这个agreement，之前在使用TexturePacker GUI时，都已经同意过了的嘛。倒腾了一段时间，才发现，无论是Windows，还是Mac，运行Jenkins的都不是当前的用户。Mac系统下，可以在/Users/Shared中找到一个名为Jenkins的文件夹，Jenkins运行是就用的是这个同名的用户。Windows系统下，可以在《服务》中找到名为Jenkins的服务，右键该服务，选择属性，选择登录这个标签，可以看到运行Jenkins服务的实际上是本地系统账户，而非当前帐号。正因为之前没有在实际运行Jenkins服务的账户下同意过TexturePacker的Agreement，才导致命令行命令无法执行。知道原因后，解决方案就相对简单啦。</p>

<p>Mac: 在terminal中依次使用如下两个命令后，就能看到license agreement弹出来，点击I agree即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mf">1.</span> <span class="n">sudo</span> <span class="n">su</span> <span class="n">jenkins</span>
</span><span class='line'><span class="mf">2.</span> <span class="n">TexturePacker</span> <span class="err">—</span><span class="n">gui</span>
</span></code></pre></td></tr></table></div></figure>


<p>Windows:　如果之前有查看过Jenkins服务的属性，就会发现登录标签页中，不光可以用本地系统账户登录服务，也可以用自己的账户登录Jenkins服务。因此登录自己的账户，同意agreement，TexturePacker的命令行就能用啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A*寻路]]></title>
    <link href="http://wenboqiu.github.io/blog/2015/06/06/astar-path-finding/"/>
    <updated>2015-06-06T07:05:11+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2015/06/06/astar-path-finding</id>
    <content type="html"><![CDATA[<p>这几天在公司做一个2D RPG游戏的demo，涉及到寻路的问题，于是自己写了A*寻路算法，分享一下。</p>

<p>地图初始化时，只需要告诉PathFind这个类地图的宽度跟高度，并且初始化障碍点即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">PathFind</span><span class="o">::</span><span class="n">InitMap</span><span class="p">(</span><span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">width</span><span class="p">,</span> <span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">width</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">_tileMap</span><span class="o">-&gt;</span><span class="n">getMapSize</span><span class="p">().</span><span class="n">height</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isWalkable</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">PathFind</span><span class="o">::</span><span class="n">UpdateMapPoint</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时，只需要调用FindPath方法，设置能够行走的方向（八方向or四方向），是否无视边角。该方法返回寻路是否成功。如果成功，路径数据会被存入栈中m_pathList，调用NextPathPoint方法，即可获得下一个目标点。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">m_pathFind</span><span class="p">.</span><span class="n">FindPath</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">m_directionMode</span><span class="o">==</span><span class="n">kDirectionMode8</span><span class="o">?</span><span class="kc">true</span><span class="o">:</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'><span class="n">m_pathFind</span><span class="p">.</span><span class="n">NextPathPoint</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>源码在最下面&mdash;&ndash;>></p>

<p>参考文章：</p>

<ol>
<li><p>理解A*寻路算法具体过程 (<a href="http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html">http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html</a>)</p></li>
<li><p>A* Pathfinding for Beginners (<a href="http://www.policyalmanac.org/games/aStarTutorial.htm">http://www.policyalmanac.org/games/aStarTutorial.htm</a>)</p></li>
</ol>


<p>另外提一下，网上热传的一个45度ARPG demo &lt;&lt;热血沙城>>，我下载了它的Cocos2d-x2.2.5 C++修改版，虽然作者说该demo使用了A*寻路，但是实际运行起来，效率很低，一个稍微需要绕道的路径，电脑能够卡好几秒，且人物走的并不是最短路径，更像是广度优先搜索的结果。
(<a href="http://blog.csdn.net/zym_123456/article/details/42641591">http://blog.csdn.net/zym_123456/article/details/42641591</a>)</p>

<!--more-->


<p>PathFind.h&mdash;&ndash;>></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef __PATHFIND_H__</span>
</span><span class='line'><span class="cp">#define __PATHFIND_H__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt; </span><span class="c1">// for std::find</span>
</span><span class='line'><span class="cp">#include &quot;cocos2d.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PathPoint</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PathPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkable</span><span class="p">);</span>
</span><span class='line'>  <span class="o">~</span><span class="n">PathPoint</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">ClearPathInfo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">int</span> <span class="n">GetX</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_x</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">int</span> <span class="n">GetY</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">m_y</span><span class="p">;}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">float</span> <span class="n">GetPathFValue</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_FValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">SetPathGValue</span><span class="p">(</span><span class="kt">float</span> <span class="n">gValue</span><span class="p">){</span><span class="n">m_GValue</span> <span class="o">=</span> <span class="n">gValue</span><span class="p">;</span> <span class="n">m_FValue</span><span class="o">=</span><span class="n">m_GValue</span><span class="o">+</span><span class="n">m_HValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">float</span> <span class="n">GetPathGValue</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_GValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">SetPathHValue</span><span class="p">(</span><span class="kt">float</span> <span class="n">hValue</span><span class="p">){</span><span class="n">m_HValue</span> <span class="o">=</span> <span class="n">hValue</span><span class="p">;</span> <span class="n">m_FValue</span><span class="o">=</span><span class="n">m_GValue</span><span class="o">+</span><span class="n">m_HValue</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">float</span> <span class="n">GetPathHValue</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_HValue</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">SetWalkable</span><span class="p">(</span><span class="kt">bool</span> <span class="n">isWalkable</span><span class="p">){</span><span class="n">m_bWalkable</span> <span class="o">=</span> <span class="n">isWalkable</span><span class="p">;}</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">GetWalkable</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_bWalkable</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PathPoint</span><span class="o">*</span> <span class="n">m_parentPoint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_x</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_y</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">m_bWalkable</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">m_FValue</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">m_GValue</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">m_HValue</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PathFind</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PathFind</span><span class="p">()</span><span class="o">:</span><span class="n">m_pathEnd</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)){}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">PathFind</span><span class="p">(){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">InitMap</span><span class="p">(</span><span class="kt">int</span> <span class="n">mapWidth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mapHeight</span><span class="p">);</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">bool</span> <span class="n">UpdateMapPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkAble</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">FindPath</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">start</span><span class="p">,</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PrintPath</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">NextPathPoint</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">GetPathEnd</span><span class="p">(){</span><span class="k">return</span> <span class="n">m_pathEnd</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">FindPath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">GeneratePath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">SurroundPoints</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PathPoint</span><span class="o">*</span> <span class="n">MinPoint</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">IsWalkable</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;&amp;</span> <span class="n">surroundPoints</span><span class="p">,</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">FoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">NotFoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">CalculateGValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">CalculateHValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">m_openList</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">m_closeList</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">m_pathList</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cocos2d</span><span class="o">::</span><span class="n">Point</span> <span class="n">m_pathEnd</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __PATHFIND_H__</span>
</span></code></pre></td></tr></table></div></figure>


<p>PathFind.cpp &mdash;&ndash;>></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;PathFind.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">USING_NS_CC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">PathPoint</span><span class="o">::</span><span class="n">PathPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkable</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span><span class="n">m_x</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_y</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_bWalkable</span><span class="p">(</span><span class="n">isWalkable</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_FValue</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_GValue</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_HValue</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span><span class="n">m_parentPoint</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">PathPoint</span><span class="o">::~</span><span class="n">PathPoint</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathPoint</span><span class="o">::</span><span class="n">ClearPathInfo</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_FValue</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_GValue</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_HValue</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_parentPoint</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">&gt;&gt;</span> <span class="n">m_mapList</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">m_mapWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">m_mapHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="n">m_bMapHasInit</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">InitMap</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_mapList</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>  <span class="n">m_mapList</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">width</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">&gt;</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'>      <span class="n">m_mapList</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">height</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">PathPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="n">PathPoint</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>          <span class="n">column</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_mapList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">column</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m_mapWidth</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_mapHeight</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_bMapHasInit</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">UpdateMapPoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isWalkAble</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_bMapHasInit</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">m_mapWidth</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="n">m_mapHeight</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m_mapList</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">].</span><span class="n">SetWalkable</span><span class="p">(</span><span class="n">isWalkAble</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">FindPath</span><span class="p">(</span><span class="n">Point</span> <span class="n">start</span><span class="p">,</span> <span class="n">Point</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_bMapHasInit</span>
</span><span class='line'>      <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">x</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">m_mapWidth</span> <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">y</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">start</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">m_mapHeight</span>
</span><span class='line'>      <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">x</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">m_mapWidth</span> <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">y</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">end</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">m_mapHeight</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">FindPath</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">start</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">start</span><span class="p">.</span><span class="n">y</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">end</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">end</span><span class="p">.</span><span class="n">y</span><span class="p">],</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="n">isIgnoreCorner</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">FindPath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_closeList</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>  <span class="n">m_openList</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">start</span><span class="o">-&gt;</span><span class="n">ClearPathInfo</span><span class="p">();</span>
</span><span class='line'>  <span class="n">m_openList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">m_openList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">PathPoint</span><span class="o">*</span> <span class="n">tempStart</span> <span class="o">=</span> <span class="n">MinPoint</span><span class="p">();</span>
</span><span class='line'>      <span class="n">m_closeList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tempStart</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">surroundPoints</span> <span class="o">=</span> <span class="n">SurroundPoints</span><span class="p">(</span><span class="n">tempStart</span><span class="p">,</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="n">isIgnoreCorner</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">surroundPoints</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(;</span> <span class="n">iter</span><span class="o">!=</span><span class="n">surroundPoints</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">m_openList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="o">*</span><span class="n">iter</span><span class="p">)</span> <span class="o">!=</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">FoundPoint</span><span class="p">(</span><span class="n">tempStart</span><span class="p">,</span> <span class="o">*</span><span class="n">iter</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span><span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">NotFoundPoint</span><span class="p">(</span><span class="n">tempStart</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="o">*</span><span class="n">iter</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">surroundPoints</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">surroundPoints</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">end</span><span class="p">)</span> <span class="o">!=</span> <span class="n">surroundPoints</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">GeneratePath</span><span class="p">(</span><span class="n">end</span><span class="p">);</span>
</span><span class='line'>          <span class="n">m_pathEnd</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">end</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">());</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">GeneratePath</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">m_pathList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">m_pathList</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PathPoint</span><span class="o">*</span> <span class="n">point</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">point</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">m_pathList</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">point</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">point</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()));</span>
</span><span class='line'>      <span class="n">point</span> <span class="o">=</span> <span class="n">point</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">SurroundPoints</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is8Direction</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;</span> <span class="n">surroundPoints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">relatives</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">Vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">Vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)};</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">coords</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">center</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()),</span> <span class="n">relatives</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">surroundPoints</span><span class="p">,</span> <span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">is8Direction</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Vec2</span> <span class="n">obliquedRelatives</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)};</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">bool</span> <span class="n">flag</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>      <span class="n">Vec2</span> <span class="n">obliquedCoords</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">obliquedCoords</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">center</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">(),</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()),</span> <span class="n">obliquedRelatives</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isIgnoreCorner</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="n">flag</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">surroundPoints</span><span class="p">,</span> <span class="n">obliquedCoords</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">surroundPoints</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">PathPoint</span><span class="o">*</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">MinPoint</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_openList</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">PathPoint</span><span class="o">*</span> <span class="n">minPoint</span> <span class="o">=</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m_openList</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">m_openList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetPathFValue</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">minPoint</span><span class="o">-&gt;</span><span class="n">GetPathFValue</span><span class="p">())</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">minPoint</span> <span class="o">=</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>              <span class="n">minIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">next</span><span class="p">(</span> <span class="n">m_openList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">minIndex</span> <span class="p">);</span>
</span><span class='line'>      <span class="n">m_openList</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">minPoint</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">m_mapWidth</span> <span class="o">||</span> <span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="n">m_mapHeight</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span><span class="p">].</span><span class="n">GetWalkable</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">AddSurroundPoint</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PathPoint</span><span class="o">*&gt;&amp;</span> <span class="n">surroundPoints</span><span class="p">,</span> <span class="n">Vec2</span> <span class="n">tileCoord</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">IsWalkable</span><span class="p">(</span><span class="n">tileCoord</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">m_closeList</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">m_closeList</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span><span class="p">])</span> <span class="o">!=</span> <span class="n">m_closeList</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">surroundPoints</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m_mapList</span><span class="p">[</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">tileCoord</span><span class="p">.</span><span class="n">y</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">FoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">oldGValue</span> <span class="o">=</span> <span class="n">surround</span><span class="o">-&gt;</span><span class="n">GetPathGValue</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">newGValue</span> <span class="o">=</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetPathGValue</span><span class="p">()</span> <span class="o">+</span> <span class="n">CalculateGValue</span><span class="p">(</span><span class="n">center</span><span class="p">,</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">oldGValue</span> <span class="o">&gt;</span> <span class="n">newGValue</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">surround</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>      <span class="n">surround</span><span class="o">-&gt;</span><span class="n">SetPathGValue</span><span class="p">(</span><span class="n">newGValue</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">NotFoundPoint</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">center</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">surround</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">newGValue</span> <span class="o">=</span> <span class="n">center</span><span class="o">-&gt;</span><span class="n">GetPathGValue</span><span class="p">()</span> <span class="o">+</span> <span class="n">CalculateGValue</span><span class="p">(</span><span class="n">center</span><span class="p">,</span> <span class="n">surround</span><span class="p">);</span>
</span><span class='line'>  <span class="n">surround</span><span class="o">-&gt;</span><span class="n">SetPathGValue</span><span class="p">(</span><span class="n">newGValue</span><span class="p">);</span>
</span><span class='line'>  <span class="n">surround</span><span class="o">-&gt;</span><span class="n">SetPathHValue</span><span class="p">(</span><span class="n">CalculateHValue</span><span class="p">(</span><span class="n">surround</span><span class="p">,</span> <span class="n">end</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">surround</span><span class="o">-&gt;</span><span class="n">m_parentPoint</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_openList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">surround</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">CalculateGValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_offsetX</span> <span class="o">=</span> <span class="n">start</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_offsetY</span> <span class="o">=</span> <span class="n">start</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span> <span class="n">_offsetX</span> <span class="o">*</span> <span class="n">_offsetX</span> <span class="o">+</span> <span class="n">_offsetY</span> <span class="o">*</span> <span class="n">_offsetY</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">CalculateHValue</span><span class="p">(</span><span class="n">PathPoint</span><span class="o">*</span> <span class="n">start</span><span class="p">,</span> <span class="n">PathPoint</span><span class="o">*</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_x</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetX</span><span class="p">());</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">_y</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">start</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">()</span> <span class="o">-</span> <span class="n">end</span><span class="o">-&gt;</span><span class="n">GetY</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">_x</span> <span class="o">+</span> <span class="n">_y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">PrintPath</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_pathList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;Path Start------------------------------------------------------------&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//int step = 1;</span>
</span><span class='line'>      <span class="c1">//for (std::vector&lt;Point&gt;::iterator iter=m_pathList.begin(); iter!=m_pathList.end(); ++iter)</span>
</span><span class='line'>      <span class="c1">//{</span>
</span><span class='line'>      <span class="c1">// CCLOG(&quot;Step %d:(%d,%d)&quot;, step, (*iter).x, (*iter).y);</span>
</span><span class='line'>      <span class="c1">// ++step;</span>
</span><span class='line'>      <span class="c1">//}</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;Path End--------------------------------------------------------------&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Point</span> <span class="n">PathFind</span><span class="o">::</span><span class="n">NextPathPoint</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_pathList</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Point</span> <span class="n">dest</span> <span class="o">=</span> <span class="n">m_pathList</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>      <span class="n">m_pathList</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">dest</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Cocos2d-x 2.x版本CCLabelTTF支持外描边(非多个方向重绘来实现描边)]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/12/01/support-label-outline-in-cocos2dx-2-dot-x/"/>
    <updated>2014-12-01T17:12:58+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/12/01/support-label-outline-in-cocos2dx-2-dot-x</id>
    <content type="html"><![CDATA[<p>想看实现方式请直接跳到Part 2。</p>

<p>Part 1:
我上一个游戏项目使用的是Cocos2d-x 2.1.2，那时候CCLabelTTF还没有支持描边的API，后来的版本加上了enableStroke这个接口，可是实现起来的效果是内描边，内描边的效果并不是很理想，如果字体本身很细的话，内描边后，基本全是描边，没剩多少肉了。</p>

<p>当时搜寻网上，找到一个可行的外描边方案。这个方案是修改CCLabelTTF::updateTexture()这个方法，原理是将原来字体的纹理，往字的360度方向位移描边的宽度距离，然后绘制生成新的纹理，如果每40度绘制一次的话，360度就需要绘制9次，最后再将字体本身绘制一次，本来一个label 的drawcall消耗是1次，这种方案drawcall消耗就是10次。</p>

<p>这个方案能够勉强实现外描边的效果，在苹果设备上的效果还是可以的，但是一拿到android设备上检查，就会发现描边并不是连贯的，有点坑坑洼洼的感觉。更让人无法接受的是，该方案会导致label的draw call剧烈增加，一些label比较多的页面，如果都需要描边效果的话，会导致游戏每一帧的绘制时间变长，造成游戏明显的卡顿。这个问题在android的低端设备上尤其明显。于是项目后期，我们放弃了字体描边的效果。</p>

<p>下面为该方案的源码：</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//CCLabelTTF::updateTexture()</span>
</span><span class='line'><span class="n">CCTexture2D</span> <span class="o">*</span><span class="n">tex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// let system compute label&#39;s width or height when its value is 0</span>
</span><span class='line'><span class="c1">// refer to cocos2d-x issue #1430</span>
</span><span class='line'><span class="n">tex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CCTexture2D</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tex</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">tex</span><span class="o">-&gt;</span><span class="n">initWithString</span><span class="p">(</span> <span class="n">m_string</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">m_pFontName</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">m_fFontSize</span> <span class="o">*</span> <span class="n">CC_CONTENT_SCALE_FACTOR</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">CC_SIZE_POINTS_TO_PIXELS</span><span class="p">(</span><span class="n">m_tDimensions</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">m_hAlignment</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">m_vAlignment</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">tex</span><span class="o">-&gt;</span><span class="n">autorelease</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">m_strokeEnabled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//原始字符串</span>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">spriteText</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">createWithTexture</span><span class="p">(</span><span class="n">tex</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ccBlendFunc</span> <span class="n">originalBlend</span> <span class="o">=</span> <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">getBlendFunc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//计算考虑描边后texture的尺寸</span>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">realTextureSize</span> <span class="o">=</span> <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">();</span>
</span><span class='line'>    <span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//call to clear error</span>
</span><span class='line'>    <span class="n">glGetError</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建用于实现描边的可渲染texture</span>
</span><span class='line'>    <span class="n">CCRenderTexture</span> <span class="o">*</span><span class="n">rt</span> <span class="o">=</span> <span class="n">CCRenderTexture</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制底纹</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="n">m_strokeColor</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ccBlendFunc</span> <span class="n">func</span> <span class="o">=</span> <span class="p">{</span> <span class="n">GL_SRC_ALPHA</span><span class="p">,</span> <span class="n">GL_ONE</span><span class="p">};</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setBlendFunc</span><span class="p">(</span><span class="n">func</span><span class="p">);</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">CCPoint</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">,</span> <span class="mf">0.5f</span><span class="p">));</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setFlipY</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">precision</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span> <span class="c1">//此值越小，描边越细腻，同时CPU开销越高</span>
</span><span class='line'>    <span class="n">rt</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">360</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">precision</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">CC_DEGREES_TO_RADIANS</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">CCPoint</span><span class="p">(</span>
</span><span class='line'>                                        <span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5f</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5f</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">m_strokeSize</span><span class="p">));</span>
</span><span class='line'>        <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制原始字符串</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">getColor</span><span class="p">());</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setBlendFunc</span><span class="p">(</span><span class="n">originalBlend</span><span class="p">);</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">CCPoint</span><span class="p">(</span><span class="n">realTextureSize</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">,</span> <span class="n">realTextureSize</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">));</span>
</span><span class='line'>    <span class="n">spriteText</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">();</span>
</span><span class='line'>    <span class="n">rt</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tex</span> <span class="o">=</span> <span class="n">rt</span><span class="o">-&gt;</span><span class="n">getSprite</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getTexture</span><span class="p">();</span>
</span><span class='line'>    <span class="n">tex</span><span class="o">-&gt;</span><span class="n">setAliasTexParameters</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Part 2：
目前这个项目因为开始的比较早，依然使用的是Cocos2d-x 2.x版本，虽然知道Cocos2d-x 3.x版本已经支持外描边，但是因为3.x相对于2.x改动很大，不太适合直接将项目引擎直接从2.x升级到3.x版本。既然没办法直接用上3.x的特性，那只好看看能不能借鉴借鉴3.x CCLabel的实现。</p>

<p>3.x中CCLabel的实现使用了新的方式，不像2.x中先通过生成纹理，再显示，这个纹理的生成依赖于平台各自的API，不同的平台各有实现方式，不过在3.x中，CCLabel的显示是直接由特定的着色器提供支持，要想让2.x的CCLabelTTF改用类似的方案也是可行的，只不过要费时费力一些。</p>

<p>幸运的是，3.x为了兼容以前CCLabelTTF的API，也提供了原来的实现，即生成纹理，然后draw，顺带将内描边改成了外描边，只不过触控目前好像已经不对2.x版本提供支持，并没有将对内描边的修正应用到2.x版本上。</p>

<p>3.x 外描边的修正可以参考下面这个链接：
<a href="https://github.com/Dhilan007/cocos2d-x/commit/6f9d379beb6f47f43a3305b885000d44e978ccd7">https://github.com/Dhilan007/cocos2d-x/commit/6f9d379beb6f47f43a3305b885000d44e978ccd7</a></p>

<p>可以看到，这个修正主要改动了两个文件，一个是Cocos2dxBitmap.java中的createTextBitmapShadowStroke，另一个是CCDevice.mm的_initWithString。</p>

<p>第一个文件是Android平台上生成纹理的代码，在2.2.3里面，文件名和方法名也是一样的。下面是基于2.2.3修改的代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">createTextBitmapShadowStroke</span><span class="o">(</span><span class="n">String</span> <span class="n">pString</span><span class="o">,</span>  <span class="kd">final</span> <span class="n">String</span> <span class="n">pFontName</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">pFontSize</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">float</span> <span class="n">fontTintR</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">fontTintG</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">fontTintB</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">int</span> <span class="n">pAlignment</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">pWidth</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">pHeight</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">shadow</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">float</span> <span class="n">shadowDX</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">shadowDY</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">shadowBlur</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">stroke</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeR</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeG</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeB</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">strokeSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">horizontalAlignment</span> <span class="o">=</span> <span class="n">pAlignment</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">verticalAlignment</span>   <span class="o">=</span> <span class="o">(</span><span class="n">pAlignment</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pString</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">refactorString</span><span class="o">(</span><span class="n">pString</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">Paint</span> <span class="n">paint</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">newPaint</span><span class="o">(</span><span class="n">pFontName</span><span class="o">,</span> <span class="n">pFontSize</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * if the first word width less than designed width,It means no words to show</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">pWidth</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="kt">int</span> <span class="n">firstWordWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">paint</span><span class="o">.</span><span class="na">measureText</span><span class="o">(</span><span class="n">pString</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span> <span class="n">firstWordWidth</span> <span class="o">&gt;</span> <span class="n">pWidth</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;createTextBitmapShadowStroke warning:&quot;</span><span class="o">,</span><span class="s">&quot;the input width is less than the width of the pString&#39;s first word\n&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set the paint color</span>
</span><span class='line'>  <span class="n">paint</span><span class="o">.</span><span class="na">setARGB</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="mf">255.0</span> <span class="o">*</span> <span class="n">fontTintR</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="mf">255.0</span> <span class="o">*</span> <span class="n">fontTintG</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="mf">255.0</span> <span class="o">*</span> <span class="n">fontTintB</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="n">TextProperty</span> <span class="n">textProperty</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeTextProperty</span><span class="o">(</span><span class="n">pString</span><span class="o">,</span> <span class="n">pWidth</span><span class="o">,</span> <span class="n">pHeight</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">bitmapTotalHeight</span> <span class="o">=</span> <span class="o">(</span><span class="n">pHeight</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mTotalHeight</span><span class="o">:</span> <span class="n">pHeight</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// padding needed when using shadows (not used otherwise)</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">bitmapPaddingX</span>   <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">bitmapPaddingY</span>   <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">renderTextDeltaX</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">renderTextDeltaY</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span> <span class="o">||</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">bitmapTotalHeight</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">&quot;createTextBitmapShadowStroke warning:&quot;</span><span class="o">,</span><span class="s">&quot;textProperty MaxWidth is 0 or bitMapTotalHeight is 0\n&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">bitmapPaddingX</span><span class="o">,</span>
</span><span class='line'>          <span class="n">bitmapTotalHeight</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">bitmapPaddingY</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">Config</span><span class="o">.</span><span class="na">ARGB_8888</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">final</span> <span class="n">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Canvas</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Draw string. */</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">FontMetricsInt</span> <span class="n">fontMetricsInt</span> <span class="o">=</span> <span class="n">paint</span><span class="o">.</span><span class="na">getFontMetricsInt</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// draw again with stroke on if needed </span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span> <span class="n">stroke</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">final</span> <span class="n">Paint</span> <span class="n">paintStroke</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">newPaint</span><span class="o">(</span><span class="n">pFontName</span><span class="o">,</span> <span class="n">pFontSize</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>      <span class="n">paintStroke</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>      <span class="n">paintStroke</span><span class="o">.</span><span class="na">setStrokeWidth</span><span class="o">(</span><span class="n">strokeSize</span><span class="o">);</span>
</span><span class='line'>      <span class="n">paintStroke</span><span class="o">.</span><span class="na">setARGB</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">strokeR</span> <span class="o">*</span> <span class="mi">255</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">strokeG</span> <span class="o">*</span> <span class="mi">255</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">strokeB</span> <span class="o">*</span> <span class="mi">255</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeY</span><span class="o">(</span><span class="n">fontMetricsInt</span><span class="o">,</span> <span class="n">pHeight</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mTotalHeight</span><span class="o">,</span> <span class="n">verticalAlignment</span><span class="o">);</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">lines2</span> <span class="o">=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mLines</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">x</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeX</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>          <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">renderTextDeltaX</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">renderTextDeltaY</span><span class="o">,</span> <span class="n">paintStroke</span><span class="o">);</span>
</span><span class='line'>          <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">renderTextDeltaX</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">renderTextDeltaY</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>          <span class="n">y</span> <span class="o">+=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mHeightPerLine</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeY</span><span class="o">(</span><span class="n">fontMetricsInt</span><span class="o">,</span> <span class="n">pHeight</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mTotalHeight</span><span class="o">,</span> <span class="n">verticalAlignment</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mLines</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">lines</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">x</span> <span class="o">=</span> <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">computeX</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mMaxWidth</span><span class="o">,</span> <span class="n">horizontalAlignment</span><span class="o">);</span>
</span><span class='line'>          <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">renderTextDeltaX</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">renderTextDeltaY</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>          <span class="n">y</span> <span class="o">+=</span> <span class="n">textProperty</span><span class="o">.</span><span class="na">mHeightPerLine</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Cocos2dxBitmap</span><span class="o">.</span><span class="na">initNativeObject</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二个文件是iOS平台生成纹理的代码。在2.2.3中相应的代码在CCImage.mm中，方法名还是一样的。下面是基于2.2.3修改的代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">static</span> <span class="n">bool</span> <span class="n">s_isIOS7OrHigher</span> <span class="o">=</span> <span class="n">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">lazyCheckIOS7</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">bool</span> <span class="n">isInited</span> <span class="o">=</span> <span class="n">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isInited</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">s_isIOS7OrHigher</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">systemVersion</span><span class="p">]</span> <span class="nl">compare:</span><span class="s">@&quot;7.0&quot;</span> <span class="nl">options:</span><span class="n">NSNumericSearch</span><span class="p">]</span> <span class="o">!=</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
</span><span class='line'>        <span class="n">isInited</span> <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// refer CCImage::ETextAlign</span>
</span><span class='line'><span class="cp">#define ALIGN_TOP    1</span>
</span><span class='line'><span class="cp">#define ALIGN_CENTER 3</span>
</span><span class='line'><span class="cp">#define ALIGN_BOTTOM 2</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">bool</span> <span class="nf">_initWithString</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">pText</span><span class="p">,</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">CCImage</span><span class="o">::</span><span class="n">ETextAlign</span> <span class="n">eAlign</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">pFontName</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nSize</span><span class="p">,</span> <span class="n">tImageInfo</span><span class="o">*</span> <span class="n">pInfo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// lazy check whether it is iOS7 device</span>
</span><span class='line'>    <span class="n">lazyCheckIOS7</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bool</span> <span class="n">bRet</span> <span class="o">=</span> <span class="n">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span> <span class="n">pText</span> <span class="o">||</span> <span class="o">!</span> <span class="n">pInfo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">str</span>          <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="n">pText</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">fntName</span>      <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="n">pFontName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGSize</span> <span class="n">dim</span><span class="p">,</span> <span class="n">constrainSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span>     <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span>    <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// On iOS custom fonts must be listed beforehand in the App info.plist (in order to be usable) and referenced only the by the font family name itself when</span>
</span><span class='line'>        <span class="c1">// calling [UIFont fontWithName]. Therefore even if the developer adds &#39;SomeFont.ttf&#39; or &#39;fonts/SomeFont.ttf&#39; to the App .plist, the font must</span>
</span><span class='line'>        <span class="c1">// be referenced as &#39;SomeFont&#39; when calling [UIFont fontWithName]. Hence we strip out the folder path components and the extension here in order to get just</span>
</span><span class='line'>        <span class="c1">// the font family name itself. This stripping step is required especially for references to user fonts stored in CCB files; CCB files appear to store</span>
</span><span class='line'>        <span class="c1">// the &#39;.ttf&#39; extensions when referring to custom fonts.</span>
</span><span class='line'>        <span class="n">fntName</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fntName</span> <span class="n">lastPathComponent</span><span class="p">]</span> <span class="n">stringByDeletingPathExtension</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// create the font   </span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="n">fntName</span> <span class="nl">size:</span><span class="n">nSize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">font</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">dim</span> <span class="o">=</span> <span class="n">_calculateStringSize</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">font</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">constrainSize</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">font</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="n">nSize</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">font</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">dim</span> <span class="o">=</span> <span class="n">_calculateStringSize</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">font</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">constrainSize</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span> <span class="n">font</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// compute start point</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">startH</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// vertical alignment</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">vAlignment</span> <span class="o">=</span> <span class="p">(</span><span class="n">eAlign</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">vAlignment</span> <span class="o">==</span> <span class="n">ALIGN_TOP</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">startH</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">vAlignment</span> <span class="o">==</span> <span class="n">ALIGN_CENTER</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">startH</span> <span class="o">=</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">startH</span> <span class="o">=</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// adjust text rect</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">dim</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">constrainSize</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// compute the padding needed by shadow and stroke</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">shadowStrokePaddingX</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">shadowStrokePaddingY</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasStroke</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingX</span> <span class="o">=</span> <span class="p">(</span><span class="n">ceilf</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span><span class="p">))</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingY</span> <span class="o">=</span> <span class="p">(</span><span class="n">ceilf</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span><span class="p">))</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasShadow</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingX</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">shadowStrokePaddingX</span><span class="p">,</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">abs</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">width</span><span class="p">));</span>
</span><span class='line'>            <span class="n">shadowStrokePaddingY</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">shadowStrokePaddingY</span><span class="p">,</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">abs</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// add the padding (this could be 0 if no shadow and no stroke)</span>
</span><span class='line'>        <span class="n">dim</span><span class="p">.</span><span class="n">width</span>  <span class="o">+=</span> <span class="n">shadowStrokePaddingX</span><span class="p">;</span>
</span><span class='line'>        <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="n">shadowStrokePaddingY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[(</span><span class="kt">int</span><span class="p">)(</span><span class="n">dim</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">dim</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// draw text</span>
</span><span class='line'>        <span class="n">CGColorSpaceRef</span> <span class="n">colorSpace</span>  <span class="o">=</span> <span class="n">CGColorSpaceCreateDeviceRGB</span><span class="p">();</span>
</span><span class='line'>        <span class="n">CGContextRef</span> <span class="n">context</span>        <span class="o">=</span> <span class="n">CGBitmapContextCreate</span><span class="p">(</span><span class="n">data</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">colorSpace</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="n">kCGImageAlphaPremultipliedLast</span> <span class="o">|</span> <span class="n">kCGBitmapByteOrder32Big</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGColorSpaceRelease</span><span class="p">(</span><span class="n">colorSpace</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">delete</span><span class="p">[]</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// text color</span>
</span><span class='line'>        <span class="n">CGContextSetRGBFillColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorR</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorG</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorB</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// move Y rendering to the top of the image</span>
</span><span class='line'>        <span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="p">(</span><span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">));</span>
</span><span class='line'>        <span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0f</span><span class="p">);</span> <span class="c1">//NOTE: NSString draws in UIKit referential i.e. renders upside-down compared to CGBitmapContext referential</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// store the current context</span>
</span><span class='line'>        <span class="c1">//UIGraphicsPushContext(context);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// measure text size with specified font and determine the rectangle to draw text in</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="n">uHoriFlag</span> <span class="o">=</span> <span class="n">eAlign</span> <span class="o">&amp;</span> <span class="mh">0x0f</span><span class="p">;</span>
</span><span class='line'>        <span class="n">UITextAlignment</span> <span class="n">align</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITextAlignment</span><span class="p">)((</span><span class="mi">2</span> <span class="o">==</span> <span class="n">uHoriFlag</span><span class="p">)</span> <span class="o">?</span> <span class="n">UITextAlignmentRight</span>
</span><span class='line'>                                <span class="o">:</span> <span class="p">(</span><span class="mi">3</span> <span class="o">==</span> <span class="n">uHoriFlag</span><span class="p">)</span> <span class="o">?</span> <span class="n">UITextAlignmentCenter</span>
</span><span class='line'>                                <span class="o">:</span> <span class="n">UITextAlignmentLeft</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">startH</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">,</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UIGraphicsPushContext</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextSetShouldSubpixelQuantizeFonts</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextBeginTransparencyLayerWithRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">rect</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textOriginX</span>  <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textOrigingY</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textWidth</span>    <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span>  <span class="o">-</span> <span class="n">shadowStrokePaddingX</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">textHeight</span>   <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">width</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOriginX</span> <span class="o">=</span> <span class="n">shadowStrokePaddingX</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOriginX</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOrigingY</span> <span class="o">=</span> <span class="n">startH</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textOrigingY</span> <span class="o">=</span> <span class="n">startH</span> <span class="o">-</span> <span class="n">shadowStrokePaddingY</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">textRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">textOriginX</span><span class="p">,</span> <span class="n">textOrigingY</span><span class="p">,</span> <span class="n">textWidth</span><span class="p">,</span> <span class="n">textHeight</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasStroke</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CGContextSetTextDrawingMode</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">kCGTextStroke</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">s_isIOS7OrHigher</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">NSMutableParagraphStyle</span> <span class="o">*</span><span class="n">paragraphStyle</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableParagraphStyle</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>                <span class="n">paragraphStyle</span><span class="p">.</span><span class="n">alignment</span> <span class="o">=</span> <span class="n">align</span><span class="p">;</span>
</span><span class='line'>                <span class="n">paragraphStyle</span><span class="p">.</span><span class="n">lineBreakMode</span> <span class="o">=</span> <span class="n">NSLineBreakByWordWrapping</span><span class="p">;</span>
</span><span class='line'>                <span class="p">[</span><span class="n">str</span> <span class="nl">drawInRect:</span><span class="n">textRect</span> <span class="nl">withAttributes:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>                                                      <span class="nl">NSFontAttributeName:</span> <span class="n">font</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="nl">NSStrokeWidthAttributeName:</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span> <span class="o">/</span> <span class="n">nSize</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">],</span>
</span><span class='line'>                                                      <span class="nl">NSForegroundColorAttributeName:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorR</span>
</span><span class='line'>                                                                                                     <span class="nl">green:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorG</span>
</span><span class='line'>                                                                                                      <span class="nl">blue:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">tintColorB</span>
</span><span class='line'>                                                                                                     <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">],</span>
</span><span class='line'>                                                      <span class="nl">NSParagraphStyleAttributeName:</span><span class="n">paragraphStyle</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="nl">NSStrokeColorAttributeName:</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorR</span>
</span><span class='line'>                                                                                                  <span class="nl">green:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorG</span>
</span><span class='line'>                                                                                                   <span class="nl">blue:</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorB</span>
</span><span class='line'>                                                                                                  <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">]</span>
</span><span class='line'>                                                      <span class="p">}</span>
</span><span class='line'>                 <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">[</span><span class="n">paragraphStyle</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">CGContextSetRGBStrokeColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorR</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorG</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeColorB</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">strokeSize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//original code that was not working in iOS 7</span>
</span><span class='line'>                <span class="p">[</span><span class="n">str</span> <span class="nl">drawInRect:</span> <span class="n">textRect</span> <span class="nl">withFont:</span><span class="n">font</span> <span class="nl">lineBreakMode:</span><span class="n">NSLineBreakByWordWrapping</span> <span class="nl">alignment:</span><span class="n">align</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// take care of shadow if needed</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasShadow</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CGSize</span> <span class="n">offset</span><span class="p">;</span>
</span><span class='line'>            <span class="n">offset</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>            <span class="n">offset</span><span class="p">.</span><span class="n">width</span>  <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowOffset</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>            <span class="n">CGContextSetShadow</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">shadowBlur</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// normal fonts</span>
</span><span class='line'>        <span class="c1">//if( [font isKindOfClass:[UIFont class] ] )</span>
</span><span class='line'>        <span class="c1">//{</span>
</span><span class='line'>        <span class="c1">//    [str drawInRect:CGRectMake(0, startH, dim.width, dim.height) withFont:font lineBreakMode:(UILineBreakMode)UILineBreakModeWordWrap alignment:align];</span>
</span><span class='line'>        <span class="c1">//}</span>
</span><span class='line'>        <span class="c1">//else // ZFont class</span>
</span><span class='line'>        <span class="c1">//{</span>
</span><span class='line'>        <span class="c1">//    [FontLabelStringDrawingHelper drawInRect:str rect:CGRectMake(0, startH, dim.width, dim.height) withZFont:font lineBreakMode:(UILineBreakMode)UILineBreakModeWordWrap </span>
</span><span class='line'>        <span class="c1">////alignment:align];</span>
</span><span class='line'>        <span class="c1">//}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//------------------------------------------------------------------------------------</span>
</span><span class='line'>        <span class="c1">// actually draw the text in the context</span>
</span><span class='line'>        <span class="c1">// XXX: ios7 casting</span>
</span><span class='line'>        <span class="c1">//[str drawInRect:CGRectMake(textOriginX, textOrigingY, textWidth, textHeight) withFont:font lineBreakMode:NSLineBreakByWordWrapping alignment:(NSTextAlignment)align];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextSetTextDrawingMode</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">kCGTextFill</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// actually draw the text in the context</span>
</span><span class='line'>        <span class="p">[</span><span class="n">str</span> <span class="nl">drawInRect:</span> <span class="n">textRect</span> <span class="nl">withFont:</span><span class="n">font</span> <span class="nl">lineBreakMode:</span><span class="n">NSLineBreakByWordWrapping</span> <span class="nl">alignment:</span><span class="n">align</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGContextEndTransparencyLayer</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// pop the context</span>
</span><span class='line'>        <span class="n">UIGraphicsPopContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// release the context</span>
</span><span class='line'>        <span class="n">CGContextRelease</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// output params</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">data</span>                 <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">hasAlpha</span>             <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">isPremultipliedAlpha</span> <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">bitsPerComponent</span>     <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">width</span>                <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">height</span>               <span class="o">=</span> <span class="n">dim</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bRet</span>                        <span class="o">=</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改完上述两个文件，Cococs2d-x 2.x版本就能完美支持外描边啦。</p>

<hr />

<p>2015/6/2更新1：更新CCImage.mm代码，修正字体阴影的错误。(在安卓平台上阴影的支持可能有问题，暂未测试。)</p>

<p>2015/6/2更新2：前几天Byron Song同学反应描边有问题，经过测试，按下面写法，能够得到正确的描边和阴影效果的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>
</span><span class='line'><span class="n">TTFFontShadowAndStroke</span><span class="o">::</span><span class="n">TTFFontShadowAndStroke</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCLayerColor</span> <span class="o">*</span><span class="n">layer</span> <span class="o">=</span> <span class="n">CCLayerColor</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">ccc4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">190</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">));</span>
</span><span class='line'>    <span class="n">addChild</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">s</span> <span class="o">=</span> <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getWinSize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">tintColorRed</span>      <span class="o">=</span>  <span class="p">{</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>   <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">tintColorYellow</span>   <span class="o">=</span>  <span class="p">{</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">tintColorBlue</span>     <span class="o">=</span>  <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span>   <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">strokeColor</span>       <span class="o">=</span>  <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">255</span>  <span class="p">};</span>
</span><span class='line'>    <span class="n">ccColor3B</span> <span class="n">strokeShadowColor</span> <span class="o">=</span>  <span class="p">{</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">shadowOffset</span><span class="p">(</span><span class="mf">42.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">42.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ccFontDefinition</span> <span class="n">shadowTextDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_fontName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;Marker Felt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOffset</span>  <span class="o">=</span> <span class="n">shadowOffset</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOpacity</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowBlur</span>    <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">shadowTextDef</span><span class="p">.</span><span class="n">m_fontFillColor</span>   <span class="o">=</span> <span class="n">tintColorRed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// shadow only label</span>
</span><span class='line'>    <span class="n">CCLabelTTF</span><span class="o">*</span> <span class="n">fontShadow</span> <span class="o">=</span> <span class="n">CCLabelTTF</span><span class="o">::</span><span class="n">createWithFontDefinition</span><span class="p">(</span><span class="s">&quot;Shadow Only Red Text&quot;</span><span class="p">,</span> <span class="n">shadowTextDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// add label to the scene</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">fontShadow</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fontShadow</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="o">*</span><span class="mf">2.5</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create the stroke only label</span>
</span><span class='line'>    <span class="n">ccFontDefinition</span> <span class="n">strokeTextDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_fontName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;Marker Felt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeEnabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeColor</span>   <span class="o">=</span> <span class="n">strokeColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeSize</span>    <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeTextDef</span><span class="p">.</span><span class="n">m_fontFillColor</span>   <span class="o">=</span> <span class="n">tintColorYellow</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// stroke only label</span>
</span><span class='line'>    <span class="n">CCLabelTTF</span><span class="o">*</span> <span class="n">fontStroke</span> <span class="o">=</span> <span class="n">CCLabelTTF</span><span class="o">::</span><span class="n">createWithFontDefinition</span><span class="p">(</span><span class="s">&quot;Stroke Only Red Text&quot;</span><span class="p">,</span> <span class="n">strokeTextDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// add label to the scene</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">fontStroke</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fontStroke</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="o">*</span><span class="mf">1.8</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create the label stroke and shadow</span>
</span><span class='line'>    <span class="n">ccFontDefinition</span> <span class="n">strokeShaodwTextDef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_fontName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;Marker Felt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeColor</span>   <span class="o">=</span> <span class="n">strokeShadowColor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_stroke</span><span class="p">.</span><span class="n">m_strokeSize</span>    <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOffset</span>  <span class="o">=</span> <span class="n">shadowOffset</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowOpacity</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_shadow</span><span class="p">.</span><span class="n">m_shadowBlur</span>    <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">strokeShaodwTextDef</span><span class="p">.</span><span class="n">m_fontFillColor</span>   <span class="o">=</span> <span class="n">tintColorBlue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// shadow + stroke label</span>
</span><span class='line'>    <span class="n">CCLabelTTF</span><span class="o">*</span> <span class="n">fontStrokeAndShadow</span> <span class="o">=</span> <span class="n">CCLabelTTF</span><span class="o">::</span><span class="n">createWithFontDefinition</span><span class="p">(</span><span class="s">&quot;Stroke &amp; Shadow Blue Text&quot;</span><span class="p">,</span> <span class="n">strokeShaodwTextDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// add label to the scene</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">fontStrokeAndShadow</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fontStrokeAndShadow</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="o">*</span><span class="mf">1.1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记之代码复查]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/02/21/du-shu-bi-ji-zhi-dai-ma-fu-cha/"/>
    <updated>2014-02-21T22:16:23+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/02/21/du-shu-bi-ji-zhi-dai-ma-fu-cha</id>
    <content type="html"><![CDATA[<p>前一段时间买了这本代码大全2，厚厚一大本，最近每天基本都要加班，于是早上或者晚上抽空翻一翻。今天看到一段文字，无比认同，忍不住摘录下来分享。</p>

<p>摘录（协同构建有利于传授公司文化以及编程专业知识）：</p>

<blockquote><p>复查是一个很重要的机制，它可以让程序员得到关于他们自己代码的反馈。<br/>程序员除了需要得到他们是否很好地遵循了标志的反馈之外，还需要得到程序设计主观方面的反馈，例如格式、注释、变量名、局部变量和全局变量的使用、设计方法以及“我们这里采用的解决方法”等。刚出道的编程人员需要那些有更丰富知识的前辈给予指导，而资深程序员们往往太忙而没时间同他人分享他们的知识。复查为这两种人提供了一个技术交流的平台，所以，无论在未来还是现在，复查都是培养新人以提高代码质量的好机会。</p></blockquote>


<p>在平时工作中，我们有时候会抱怨现在公司没有太多的技术氛围，其实在同一个项目组内，程序员与程序员之间还是存在很多沟通的盲区，往往每位程序员负责一个独立的模块，如果有空，相互之间分享各自模块的设计思路，互通有无，也是极好的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的开始]]></title>
    <link href="http://wenboqiu.github.io/blog/2014/01/30/xin-de-kai-shi/"/>
    <updated>2014-01-30T11:24:01+08:00</updated>
    <id>http://wenboqiu.github.io/blog/2014/01/30/xin-de-kai-shi</id>
    <content type="html"><![CDATA[<p>通过写博客来记录自己的成长，出发。。</p>
]]></content>
  </entry>
  
</feed>
