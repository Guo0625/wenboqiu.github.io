---
layout: post
title: "谈一下游戏内更新"
date: 2014-12-31 15:09:32 +0800
comments: true
categories: 
---
{% img /images/img_updating.jpg 320 768 MonsterBall %}

大家如果经常玩手游的话，我相信对上面这个画面一定不陌生。上面这个是腾讯代理的怪物弹珠的更新界面，还有些游戏更新界面设计的更加花哨，更加卖萌，目的只有一个，亲，快更新到最新版本吧，否则不能玩哦。

本来更新无可厚非，任何一个软件（游戏），总是存在bug的，总是有需求不完善的地方，通过后续更新，修正bug，更新功能，可以持续的给玩家以新内容，保持游戏的活力，最大的限度的留住玩家。但是任何一种手段使用过度的话，总是有副作用的，游戏更新也不例外。
<!--more-->
在说这个副作用之前，先简要介绍一下ios游戏更新的历史吧。早期，appstore上的应用程序和游戏都是通过appstore的更新机制提供更新给玩家，当开发商开发了一个新版本的程序或游戏，需要提交appstore进行审核，正常的审核周期是一周，如果碰到审核不通过之类的情况，于是又返工修正，有可能月余也无法在appstore里面上线。对每一个开发团队来说，任何一次app提交流程都是一个慎之又慎的经历，生怕一个细节的疏忽，导致delay。后来，cocos2dx添加了对脚本的支持，以前一般通过c++语言编写游戏逻辑，然后开发者编译打包，提交审核，现在呢，只需要在游戏内下载更新脚本文件，游戏都不需要重启，就可以加载新的脚本文件，运行新的逻辑。于是广大开发团队欢呼雀跃，终于不用老看苹果的眼色行事啦。

好处显而易见，但是副作用呢？有一件事情我印象很深刻，当时还在上一家公司，当我们告诉制作人，我们的游戏可以热更新，他很高兴，说终于可以不担心发布版本有bug啦，反正之后就能发布版本来修正。我觉得他对更新的理解是有失偏颇的，能够随时更新逻辑，不通过苹果审核，不代表我们可以随意发布一个未经测试的版本面向玩家，让玩家代替测试工程师来测试游戏。我们不善待玩家，玩家就会毫不犹豫的抛弃我们。事态的发展正如刚开始所担心的，我们经常是今天发布完一个版本，第二天就不得不发布一个紧急更新来修正一个或者多个严重的bug，有时候还是当天更新。有些bug，其实只要测试一遍场景，就能够发现的。上一个项目的结局是不幸的，团队解散，游戏停服。不考虑运营，游戏设计方面的因素，对于更新这个手段的利用，我们是不合格的，我们确实发挥了热更新的优势，但却是用来弥补测试的不充分。

设想一个普通玩家，从茫茫游戏大海中，花费了十几分钟，从appstore上下载了一个100M的游戏。一打开游戏，还是要继续下载，好不容易下载完，玩了一段时间，打算第二天有空再玩。等到第二天再次打开，映入眼帘的还是更新，还要更新10M大小，我相信任何一位普通的玩家都会嘀咕，怎么还要下载呀，对我有什么影响啊？耐着性子，等下载完，打开游戏，觉得也没什么变化呀（比如说以前我们游戏，很多更新是那些高级玩家才会接触到的，因为他们的进度更快），既然选择更新，玩家总会有期待，游戏总会有能感受得到的变化吧，否则白白更新干嘛呢。偶尔还好，如果一个游戏老是让玩家感受期待落空的滋味，如果是我，一定会毫不犹豫地把它删掉。我是来玩游戏的，不是白花钱还让开发团队耍的。

作为一个在日本市场上长居畅销榜榜首的游戏，我原以为怪物弹珠的版本更新是不会太频繁的，起码游戏基本玩法的代码是健壮的，最多可能会针对中国市场调整些怪物的参数，设计些新的活动。令我没想到的时，腾讯更新起游戏来也是很起劲呀，基本上一天一次的节奏，基本上每次都不小，更新包经常是10M上下的。作为普通玩家，每次更新完，也没觉得哪里有更新。截这张图时，我刚好准备回家，在火车上，本打算玩一会弹珠的，消磨下时间。结果一打开还是更新，一怒就把游戏给删掉了。清净。为何会频繁更新？我猜想可能是腾讯的策划们刚更新完配置，没有经过深入的测试，就上线了。结果呢，那些高玩们一下子就发现了设计的漏洞等等，于是项目组就忙不迭的修正。

最后就一句话，莫让更新用来亡羊补牢，来掩盖项目组的不作为。



